# meson
# Autogenerated from man page /usr/share/man/man1/meson.1.gz
complete -c meson -l version -d 'print version number'
complete -c meson -l help -d 'print command line help'
complete -c meson -s h -d 'show this help message and exit'
complete -c meson -s C -d 'directory to cd into before running'
complete -c meson -l allow-dirty -d 'Allow even when repository contains uncommitted changes'
complete -c meson -l formats -d 'Comma separated list of archive types to create'
complete -c meson -l include-subprojects -d 'Include source code of subprojects that have been used for the build'
complete -c meson -l no-tests -d 'Do not build and test generated packages'
complete -c meson -l no-rebuild -d 'Do not rebuild before installing'
complete -c meson -l only-changed -d 'Only overwrite files that are older than the copied file'
complete -c meson -l quiet -d 'Do not print every file that was installed'
complete -c meson -l destdir -d 'Sets or overrides DESTDIR environment.   (Since 0. 57. 0)'
complete -c meson -l dry-run -s n -d 'Doesn\'t actually install, but print logs.  (Since 0. 57. 0)'
complete -c meson -l skip-subprojects -d 'Do not install files from given subprojects.  (Since 0. 58. 0)'
complete -c meson -l tags -d 'Install only targets having one of the given tags.  (Since 0. 60. 0)'
complete -c meson -l strip -d 'Strip targets even if strip option was not set during configure.  (Since 0'
complete -c meson -l targets -d 'print all top level targets (executables, libraries, etc)'
complete -c meson -l target-files -d 'print the source files of the given target'
complete -c meson -l buildsystem-files -d 'print all files that make up the build system (meson. build, meson'
complete -c meson -l tests -d 'print all unit tests'
complete -c meson -l name -d 'project name.  default: name of current directory'
complete -c meson -s e -l executable -d 'executable name.  default: project name'
complete -c meson -s d -l deps -d 'dependencies, comma-separated'
complete -c meson -s l
complete -c meson -l language -d 'project language.  default: autodetected based on source files'
complete -c meson -s b -l build -d 'build after generation'
complete -c meson -l builddir -d 'directory for build'
complete -c meson -s f -l force -d 'force overwrite of existing files and directories'
complete -c meson -l type -d 'project type.  default: executable based project'
complete -c meson -l repeat -d 'run tests as many times as specified'
complete -c meson -l gdb -d 'run tests under gdb'
complete -c meson -l list -d 'list all available tests'
complete -c meson -l wrapper -d 'invoke all tests via the given wrapper (e. g.  valgrind)'
complete -c meson -l suite -d 'run tests in this suite'
complete -c meson -l no-suite -d 'do not run tests in this suite'
complete -c meson -l no-stdsplit -d 'do not split stderr and stdout in test logs'
complete -c meson -l benchmark -d 'run benchmarks instead of tests'
complete -c meson -l logbase -d 'base of file name to use for writing test logs'
complete -c meson -l num-processes -d 'how many parallel processes to use to run tests'
complete -c meson -l verbose -d 'do not redirect stdout and stderr'
complete -c meson -s t -d 'a multiplier to use for test timeout values (usually something like 100 for Vâ€¦'
complete -c meson -l setup -d 'use the specified test setup'
complete -c meson -s s -l sourcedir -d 'Path to source directory'
complete -c meson -s V -d 'Enable verbose output'
complete -c meson -s S -l skip-errors -d 'Skip errors instead of aborting'
complete -c meson -l clean -d 'Clean the build directory'
complete -c meson -s j -l jobs -d 'The number of worker jobs to run (if supported)'
complete -c meson -l load-average -d 'The system load average to try to maintain (if supported)'
complete -c meson -s v -d 'Show more verbose output'
complete -c meson -l ninja-args -d 'Arguments to pass to `ninja` (applied only on `ninja` backend)'
complete -c meson -l vs-args -d 'Arguments to pass to `msbuild` (applied only on `vs` backend)'
complete -c meson -l xcode-args -d 'Arguments to pass to `xcodebuild` (applied only on `xcode` backend)'
complete -c meson -l workdir -s w -d 'Directory to cd into before running (default: builddir, Since 1. 0. 0)'
complete -c meson -l dump -d 'Only print required environment (Since 0. 62'
complete -c meson -l dump-format -d 'Format used with --dump (Since 1. 1. 0)'
complete -c meson -l debarch -d 'The dpkg architecture to generate'
complete -c meson -l gccsuffix -d 'A particular gcc version suffix if necessary'
complete -c meson -s o -d 'The output file'
complete -c meson -l cross -d 'Generate a cross compilation file'
complete -c meson -l native -d 'Generate a native compilation file'
complete -c meson -l system -d 'Define system for cross compilation'
complete -c meson -l subsystem -d 'Define subsystem for cross compilation'
complete -c meson -l kernel -d 'Define kernel for cross compilation'
complete -c meson -l cpu -d 'Define cpu for cross compilation'
complete -c meson -l cpu-family -d 'Define cpu family for cross compilation'
complete -c meson -l endian -d 'Define endianness for cross compilation'
complete -c meson -s q -l check-only -d 'exit with 1 if files would be modified by meson format'
complete -c meson -s i -l inplace -d 'format files in-place'
complete -c meson -s r -l recursive -d 'recurse subdirs (requires --check-only or --inplace option)'
complete -c meson -s c -l configuration -d 'read configuration from meson. format'
complete -c meson -l editor-config -d 'try to read configuration from . editorconfig'
complete -c meson -l output -d 'output file (implies having exactly one input)'

