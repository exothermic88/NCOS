# ld.mold
# Autogenerated from man page /usr/share/man/man1/ld.mold.1.gz
complete -c 'ld.mold' -l start-group -l end-group -d 'Dynamic symbol resolution Some Unix linker features are difficult to understa…'
complete -c 'ld.mold' -l chroot -d 'Set dir as the root directory'
complete -c 'ld.mold' -l color-diagnostics -d 'Show diagnostic messages in color using ANSI escape sequences'
complete -c 'ld.mold' -l no-color-diagnostics -d 'Synonym for --color-diagnostics=never'
complete -c 'ld.mold' -l detach -d 'Permit or do not permit mold to create a debug info file in the background'
complete -c 'ld.mold' -l fork -l no-fork -d 'Spawn a child process and let it do the actual linking'
complete -c 'ld.mold' -l perf -d 'Print performance statistics'
complete -c 'ld.mold' -l print-dependencies -d 'Print out dependency information for input files'
complete -c 'ld.mold' -l relocatable-merge-sections -d 'By default, mold doesn\'t merge input sections by name when merging input obje…'
complete -c 'ld.mold' -l repro -d 'Archive input files, as well as a text file containing command line options, …'
complete -c 'ld.mold' -l reverse-sections -d 'Reverse the order of input sections before assigning them the offsets in the …'
complete -c 'ld.mold' -l run -d 'Run command with mold as /usr/bin/ld'
complete -c 'ld.mold' -l separate-debug-file -l separate-debug-file -d 'Bundle debug info sections into a separate file instead of embedding them in …'
complete -c 'ld.mold' -l shuffle-sections -l shuffle-sections -d 'Randomize the output by shuffling the order of input sections before assignin…'
complete -c 'ld.mold' -l spare-program-headers -d 'Append the given number of PT_NULL entries to the end of the program header, …'
complete -c 'ld.mold' -l stats -d 'Print input statistics'
complete -c 'ld.mold' -l thread-count -d 'Use count number of threads'
complete -c 'ld.mold' -l threads -l no-threads -d 'Use multiple threads'
complete -c 'ld.mold' -l quick-exit -l no-quick-exit -d 'Use or do not use quick_exit to exit'
complete -c 'ld.mold' -s z -s z -d 'As a security measure, some CPU instruction sets have recently gained a featu…'
complete -c 'ld.mold' -l help -d 'Report usage information to stdout and exit'
complete -c 'ld.mold' -s v -l version -d 'Report version information to stdout'
complete -c 'ld.mold' -s V -d 'Report version and target information to stdout'
complete -c 'ld.mold' -s E -l export-dynamic -l no-export-dynamic -d 'When creating an executable, using the -E option causes all global symbols to…'
complete -c 'ld.mold' -s F -l filter -d 'Set the DT_FILTER dynamic section field to libname'
complete -c 'ld.mold' -s I -l dynamic-linker -l no-dynamic-linker -d 'Set the dynamic linker path to file'
complete -c 'ld.mold' -s L -l library-path -d 'Add dir to the list of library search paths from which mold searches librarie…'
complete -c 'ld.mold' -s M -l print-map -d 'Write a map file to stdout'
complete -c 'ld.mold' -s N -l omagic -l no-omagic -d 'Force mold to emit an output file with an old-fashioned memory layout'
complete -c 'ld.mold' -s S -l strip-debug -d 'Omit . debug_* sections from the output file'
complete -c 'ld.mold' -s T -l script -d 'Read linker script from file'
complete -c 'ld.mold' -s X -l discard-locals -d 'Discard temporary local symbols to reduce the sizes of the symbol table and t…'
complete -c 'ld.mold' -s e -l entry
complete -c 'ld.mold' -s f -l auxiliary -d 'Set the DT_AUXILIARY dynamic section field to shlib'
complete -c 'ld.mold' -s h -l soname -d 'Set the DT_SONAME dynamic section field to libname'
complete -c 'ld.mold' -s l -d 'Search for liblibname. so or liblibname. a from library search paths'
complete -c 'ld.mold' -s m -d 'Choose a target'
complete -c 'ld.mold' -s o -l output -d 'Use file as the output file name instead of the default name a. out'
complete -c 'ld.mold' -s r -l relocatable -d 'Instead of generating an executable or a shared object file, combine input ob…'
complete -c 'ld.mold' -s s -l strip-all -d 'Omit . symtab section from the output file'
complete -c 'ld.mold' -s u -l undefined -d 'If symbol remains as an undefined symbol after reading all object files, and …'
complete -c 'ld.mold' -s y -l trace-symbol -d 'Trace references to symbol'
complete -c 'ld.mold' -l Bdynamic -d 'Link against shared libraries'
complete -c 'ld.mold' -l Bstatic -d 'Do not link against shared libraries'
complete -c 'ld.mold' -l Bsymbolic -d 'When creating a shared library, make global symbols export-only (i. e'
complete -c 'ld.mold' -l Bsymbolic-functions -d 'This option has the same effect as --Bsymbolic but works only for function sy…'
complete -c 'ld.mold' -l Bsymbolic-non-weak -d 'This option has the same effect as --Bsymbolic but works only for non-weak sy…'
complete -c 'ld.mold' -l Bsymbolic-non-weak-functions -d 'This option has the same effect as --Bsymbolic but works only for non-weak fu…'
complete -c 'ld.mold' -l Bno-symbolic -d 'Cancel --Bsymbolic, --Bsymbolic-functions, --Bsymbolic-non-weak and --Bsymbol…'
complete -c 'ld.mold' -l Map -d 'Write map file to file'
complete -c 'ld.mold' -l Tbss -d 'Alias for --section-start=. bss=address'
complete -c 'ld.mold' -l Tdata -d 'Alias for --section-start=. data=address'
complete -c 'ld.mold' -l Ttext -d 'Alias for --section-start=. text=address'
complete -c 'ld.mold' -l allow-multiple-definition -d 'Normally, the linker reports an error if there are more than one definition o…'
complete -c 'ld.mold' -l allow-shlib-undefined -l no-allow-shlib-undefined -d 'Even if mold succeeds in linking a main executable without undefined symbol e…'
complete -c 'ld.mold' -l as-needed -l no-as-needed -d 'By default, shared libraries given to the linker are unconditionally added to…'
complete -c 'ld.mold' -l build-id -d 'Create a . note. gnu'
complete -c 'ld.mold' -l no-build-id -d 'Synonym for --build-id=none'
complete -c 'ld.mold' -l compress-debug-sections -d 'Compress DWARF debug info ('
complete -c 'ld.mold' -l defsym -d 'Define symbol as an alias for value'
complete -c 'ld.mold' -l default-symver -d 'Use soname as a symbol version and append that version to all symbols'
complete -c 'ld.mold' -l demangle -l no-demangle -d 'Demangle C++ and Rust symbols in log messages'
complete -c 'ld.mold' -l dependency-file -d 'Write a dependency file to file'
complete -c 'ld.mold' -l dynamic-list -d 'Read a list of dynamic symbols from file'
complete -c 'ld.mold' -l eh-frame-hdr -l no-eh-frame-hdr -d 'Create . eh_frame_hdr section'
complete -c 'ld.mold' -l emit-relocs -d 'The linker usually "consumes" relocation sections'
complete -c 'ld.mold' -l enable-new-dtags -l disable-new-dtags -d 'By default, mold emits DT_RUNPATH for --rpath'
complete -c 'ld.mold' -l execute-only
complete -c 'ld.mold' -l exclude-libs -d 'Mark all symbols in the given libraries hidden'
complete -c 'ld.mold' -l export-dynamic-symbol -d 'Put symbols matching symbol in the dynamic symbol table'
complete -c 'ld.mold' -l export-dynamic-symbol-list -d 'Read a list of dynamic symbols from file'
complete -c 'ld.mold' -l fatal-warnings -l no-fatal-warnings -d 'Treat warnings as errors'
complete -c 'ld.mold' -l fini -d 'Call symbol at unload-time'
complete -c 'ld.mold' -l gc-sections -l no-gc-sections -d 'Remove unreferenced sections'
complete -c 'ld.mold' -l gdb-index -d 'Create a . gdb_index section to speed up GNU debugger'
complete -c 'ld.mold' -l hash-style -d 'Set hash style'
complete -c 'ld.mold' -l icf -l no-icf -d 'It is not uncommon for a program to contain many identical functions that dif…'
complete -c 'ld.mold' -l ignore-data-address-equality -d 'Make ICF to merge not only functions but also data'
complete -c 'ld.mold' -l image-base -d 'Set the base address to addr'
complete -c 'ld.mold' -l init -d 'Call symbol at load-time'
complete -c 'ld.mold' -l no-undefined -d 'Report undefined symbols (even with --shared)'
complete -c 'ld.mold' -l noinhibit-exec -d 'Create an output file even if errors occur'
complete -c 'ld.mold' -l pack-dyn-relocs -d 'If relr is specified, all R_*_RELATIVE relocations are put into . relr'
complete -c 'ld.mold' -l pie -l pic-executable -l no-pie -l no-pic-executable -d 'Create a position-independent executable'
complete -c 'ld.mold' -l print-gc-sections -l no-print-gc-sections -d 'Print removed unreferenced sections'
complete -c 'ld.mold' -l print-icf-sections -l no-print-icf-sections -d 'Print folded identical sections'
complete -c 'ld.mold' -l push-state -l pop-state
complete -c 'ld.mold' -l whole-archive -l static -l start-lib
complete -c 'ld.mold' -l relax -l no-relax -d 'Rewrite machine instructions with more efficient ones for some relocations'
complete -c 'ld.mold' -l require-defined -d 'Like --undefined, except the new symbol must be defined by the end of the link'
complete -c 'ld.mold' -l retain-symbols-file -d 'Keep only symbols listed in file'
complete -c 'ld.mold' -l rpath -d 'Add dir to runtime search paths'
complete -c 'ld.mold' -l section-start -d 'Set address to section'
complete -c 'ld.mold' -l shared -l Bshareable -d 'Create a share library'
complete -c 'ld.mold' -l spare-dynamic-tags -d 'Append the given number of DT_NULL entries to the end of the '
complete -c 'ld.mold' -l end-lib -d 'Handle object files between --start-lib and --end-lib as if they were in an a…'
complete -c 'ld.mold' -l sysroot -d 'Set target system root directory to dir'
complete -c 'ld.mold' -l trace -d 'Print name of each input file'
complete -c 'ld.mold' -l undefined-glob -d 'Synonym for --undefined, except that --undefined-glob takes a glob pattern in…'
complete -c 'ld.mold' -l undefined-version -l no-undefined-version -d 'By default, mold warns on a symbol specified by a version script or by --expo…'
complete -c 'ld.mold' -l unique -d 'Don\'t merge input sections that match the given glob pattern pattern'
complete -c 'ld.mold' -l unresolved-symbols -d 'How to handle undefined symbols'
complete -c 'ld.mold' -l version-script -d 'Read version script from file'
complete -c 'ld.mold' -l warn-common -l no-warn-common -d 'Warn about common symbols'
complete -c 'ld.mold' -l warn-once -d 'Only warn once for each undefined symbol instead of warn for each relocation …'
complete -c 'ld.mold' -l warn-unresolved-symbols -l error-unresolved-symbols -d 'Normally, the linker reports an error for unresolved symbols'
complete -c 'ld.mold' -l no-whole-archive -d 'When archive files ('
complete -c 'ld.mold' -l wrap -d 'Make symbol be resolved to __wrap_symbol'
complete -c 'ld.mold' -o fcf-protection -d 'mold looks for GNU_PROPERTY_X86_FEATURE_1_IBT bit and GNU_PROPERTY_X86_FEATUR…'
complete -c 'ld.mold' -o EL -o Onumber -l dc -l dp -l no-add-needed -l no-copy-dt-needed-entries -l nostdlib -l rpath-link -l sort-common -l sort-section -l warn-constructors -l fix-cortex-a53-835769 -l fix-cortex-a53-843419 -d 'Ignored ENVIRONMENT VARIABLES'

