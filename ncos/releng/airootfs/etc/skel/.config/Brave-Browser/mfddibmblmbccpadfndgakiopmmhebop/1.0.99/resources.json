[{"name":"1x1.gif","aliases":["1x1-transparent.gif"],"kind":{"mime":"image/gif"},"content":"R0lGODlhAQABAIAAAP///////yH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=="},{"name":"2x2.png","aliases":["2x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAC0lEQVQI12NgQAcAABIAAe+JVKQAAAAASUVORK5CYII="},{"name":"3x2.png","aliases":["3x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAYAAACddGYaAAAAC0lEQVQI12NgwAUAABoAASRETuUAAAAASUVORK5CYII="},{"name":"32x32.png","aliases":["32x32-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGklEQVRYw+3BAQEAAACCIP+vbkhAAQAAAO8GECAAAZf3V9cAAAAASUVORK5CYII="},{"name":"amazon_ads.js","aliases":["amazon-adsystem.com/aax2/amzn_ads.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBpZiAoIGFtem5hZHMgKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHcgPSB3aW5kb3c7CiAgICB2YXIgbm9vcGZuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgOwogICAgfS5iaW5kKCk7CiAgICB2YXIgYW16bmFkcyA9IHsKICAgICAgICBhcHBlbmRTY3JpcHRUYWc6IG5vb3BmbiwKICAgICAgICBhcHBlbmRUYXJnZXRpbmdUb0FkU2VydmVyVXJsOiBub29wZm4sCiAgICAgICAgYXBwZW5kVGFyZ2V0aW5nVG9RdWVyeVN0cmluZzogbm9vcGZuLAogICAgICAgIGNsZWFyVGFyZ2V0aW5nRnJvbUdQVEFzeW5jOiBub29wZm4sCiAgICAgICAgZG9BbGxUYXNrczogbm9vcGZuLAogICAgICAgIGRvR2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICBkb1Rhc2s6IG5vb3BmbiwKICAgICAgICBkZXRlY3RJZnJhbWVBbmRHZXRVUkw6IG5vb3BmbiwKICAgICAgICBnZXRBZHM6IG5vb3BmbiwKICAgICAgICBnZXRBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldEFkRm9yU2xvdDogbm9vcGZuLAogICAgICAgIGdldEFkc0NhbGxiYWNrOiBub29wZm4sCiAgICAgICAgZ2V0RGlzcGxheUFkczogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGdldEtleXM6IG5vb3BmbiwKICAgICAgICBnZXRSZWZlcnJlclVSTDogbm9vcGZuLAogICAgICAgIGdldFNjcmlwdFNvdXJjZTogbm9vcGZuLAogICAgICAgIGdldFRhcmdldGluZzogbm9vcGZuLAogICAgICAgIGdldFRva2Vuczogbm9vcGZuLAogICAgICAgIGdldFZhbGlkTWlsbGlzZWNvbmRzOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHM6IG5vb3BmbiwKICAgICAgICBnZXRWaWRlb0Fkc0FzeW5jOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGhhbmRsZUNhbGxCYWNrOiBub29wZm4sCiAgICAgICAgaGFzQWRzOiBub29wZm4sCiAgICAgICAgcmVuZGVyQWQ6IG5vb3BmbiwKICAgICAgICBzYXZlQWRzOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nRm9yR1BUQXN5bmM6IG5vb3BmbiwKICAgICAgICBzZXRUYXJnZXRpbmdGb3JHUFRTeW5jOiBub29wZm4sCiAgICAgICAgdHJ5R2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICB1cGRhdGVBZHM6IG5vb3BmbgogICAgfTsKICAgIHcuYW16bmFkcyA9IGFtem5hZHM7CiAgICB3LmFtem5fYWRzID0gdy5hbXpuX2FkcyB8fCBub29wZm47CiAgICB3LmFheF93cml0ZSA9IHcuYWF4X3dyaXRlIHx8IG5vb3BmbjsKICAgIHcuYWF4X3JlbmRlcl9hZCA9IHcuYWF4X3JlbmRlcl9hZCB8fCBub29wZm47Cn0pKCk7Cg=="},{"name":"amazon_apstag.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL2doanFwaC8KLy8gaHR0cHM6Ly9naXRodWIuY29tL05hbm9NZW93L1F1aWNrUmVwb3J0cy9pc3N1ZXMvMzcxNwovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL3F5eDdlbi8KCi8vIGh0dHBzOi8vc2VhcmNoZm94Lm9yZy9tb3ppbGxhLWNlbnRyYWwvc291cmNlL2Jyb3dzZXIvZXh0ZW5zaW9ucy93ZWJjb21wYXQvc2hpbXMvYXBzdGFnLmpzCi8vICAgSW1wb3J0IHF1ZXVlLXJlbGF0ZWQgaW5pdGlhbGl6YXRpb24gY29kZS4KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIGNvbnN0IHcgPSB3aW5kb3c7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICA7IC8vIGpzaGludCBpZ25vcmU6bGluZQogICAgfS5iaW5kKCk7CiAgICBjb25zdCBfUSA9IHcuYXBzdGFnICYmIHcuYXBzdGFnLl9RIHx8IFtdOwogICAgY29uc3QgYXBzdGFnID0gewogICAgICAgIF9RLAogICAgICAgIGZldGNoQmlkczogZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICBpZiAoIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgYihbXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGluaXQ6IG5vb3BmbiwKICAgICAgICBzZXREaXNwbGF5Qmlkczogbm9vcGZuLAogICAgICAgIHRhcmdldGluZ0tleXM6IG5vb3BmbiwKICAgIH07CiAgICB3LmFwc3RhZyA9IGFwc3RhZzsKICAgIF9RLnB1c2ggPSBmdW5jdGlvbihwcmVmaXgsIGFyZ3MpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBzd2l0Y2ggKHByZWZpeCkgewogICAgICAgICAgICBjYXNlICdmJzoKICAgICAgICAgICAgICAgIGFwc3RhZy5mZXRjaEJpZHMoLi4uYXJncyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS50cmFjZShlKTsKICAgICAgICB9CiAgICB9OwogICAgZm9yICggY29uc3QgY21kIG9mIF9RICkgewogICAgICAgIF9RLnB1c2goY21kKTsKICAgIH0KfSkoKTsK"},{"name":"ampproject_v0.js","aliases":["ampproject.org/v0.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZDsKICAgIGlmICggIWhlYWQgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgc3R5bGUudGV4dENvbnRlbnQgPSBbCiAgICAgICAgJ2JvZHkgeycsCiAgICAgICAgJyAgYW5pbWF0aW9uOiBub25lICFpbXBvcnRhbnQ7JywKICAgICAgICAnICBvdmVyZmxvdzogdW5zZXQgIWltcG9ydGFudDsnLAogICAgICAgICd9JwogICAgXS5qb2luKCdcbicpOwogICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0pKCk7Cg=="},{"name":"chartbeat.js","aliases":["static.chartbeat.com/chartbeat.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cucFNVUEVSRkxZID0gewogICAgICAgIGFjdGl2aXR5OiBub29wZm4sCiAgICAgICAgdmlydHVhbFBhZ2U6IG5vb3BmbgogICAgfTsKICAgIGZvciAoIGNvbnN0IGhpZGVyIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2lkXj1jaGFydGJlYXQtZmxpY2tlci1jb250cm9sXScpICkgewogICAgICAgIGhpZGVyLnJlbW92ZSgpOwogICAgfQp9KSgpOwo="},{"name":"doubleclick_instream_ad_status.js","aliases":["doubleclick.net/instream/ad_status.js"],"kind":{"mime":"application/javascript"},"content":"d2luZG93Lmdvb2dsZV9hZF9zdGF0dXMgPSAxOwo="},{"name":"empty","aliases":[],"kind":{"mime":"application/octet-stream"},"content":""},{"name":"fingerprint2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxNC1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBSZWZlcmVuY2U6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvdHJlZS92MgoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgY29uc3QgaGV4MzIgPSBsZW4gPT4gewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKICAgICAgICAgICAgLnRvU3RyaW5nKDE2KQogICAgICAgICAgICAuc2xpY2UoLWxlbikKICAgICAgICAgICAgLnBhZFN0YXJ0KGxlbiwgJzAnKTsKICAgIH07CiAgICBjb25zdCBicm93c2VySWQgPSBgJHtoZXgzMig4KX0ke2hleDMyKDgpfSR7aGV4MzIoOCl9JHtoZXgzMig4KX1gOwogICAgY29uc3QgZnAyID0gZnVuY3Rpb24oKXt9OwogICAgZnAyLmdldCA9IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgaWYgKCAhY2IgICkgeyBjYiA9IG9wdHM7IH0KICAgICAgICBzZXRUaW1lb3V0KCggKSA9PiB7IGNiKFtdKTsgfSwgMSk7CiAgICB9OwogICAgZnAyLmdldFByb21pc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTsKICAgIH07CiAgICBmcDIuZ2V0VjE4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGJyb3dzZXJJZDsKICAgIH07CiAgICBmcDIueDY0aGFzaDEyOCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBicm93c2VySWQ7CiAgICB9OwogICAgZnAyLnByb3RvdHlwZSA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgICAgIGlmICggIWNiICApIHsgY2IgPSBvcHRzOyB9CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCApID0+IHsgY2IoYnJvd3NlcklkLCBbXSk7IH0sIDEpOwogICAgICAgIH0sCiAgICB9OwogICAgc2VsZi5GaW5nZXJwcmludDIgPSBmcDI7Cn0pKCk7Cg=="},{"name":"fingerprint3.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCB2aXNpdG9ySWQgPSAoKCApID0+IHsKICAgICAgICBsZXQgaWQgPSAnJzsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA4OyBpKysgKSB7CiAgICAgICAgICAgIGlkICs9IChNYXRoLnJhbmRvbSgpICogMHgxMDAwMCArIDB4MTAwMCB8IDApLnRvU3RyaW5nKDE2KS5zbGljZSgtNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpZDsKICAgIH0pKCk7CiAgICBjb25zdCBGaW5nZXJwcmludEpTID0gY2xhc3MgewogICAgICAgIHN0YXRpYyBoYXNoQ29tcG9uZW50cygpIHsKICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3JJZDsKICAgICAgICB9CiAgICAgICAgc3RhdGljIGxvYWQoKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEZpbmdlcnByaW50SlMoKSk7CiAgICAgICAgfQogICAgICAgIGdldCgpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7CiAgICAgICAgICAgICAgICB2aXNpdG9ySWQsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07CiAgICB3aW5kb3cuRmluZ2VycHJpbnRKUyA9IEZpbmdlcnByaW50SlM7Cn0pKCk7Cg=="},{"name":"google-analytics_analytics.js","aliases":["google-analytics.com/analytics.js","googletagmanager_gtm.js","googletagmanager.com/gtm.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vYW5hbHl0aWNzanMvCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgVHJhY2tlciA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGNvbnN0IHAgPSBUcmFja2VyLnByb3RvdHlwZTsKICAgIHAuZ2V0ID0gbm9vcGZuOwogICAgcC5zZXQgPSBub29wZm47CiAgICBwLnNlbmQgPSBub29wZm47CiAgICAvLwogICAgY29uc3QgdyA9IHdpbmRvdzsKICAgIGNvbnN0IGdhTmFtZSA9IHcuR29vZ2xlQW5hbHl0aWNzT2JqZWN0IHx8ICdnYSc7CiAgICBjb25zdCBnYVF1ZXVlID0gd1tnYU5hbWVdOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VCbG9ja09yaWdpbi91QXNzZXRzL3B1bGwvNDExNQogICAgY29uc3QgZ2EgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgIGlmICggbGVuID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpOwogICAgICAgIGxldCBmbjsKICAgICAgICBsZXQgYSA9IGFyZ3NbbGVuLTFdOwogICAgICAgIGlmICggYSBpbnN0YW5jZW9mIE9iamVjdCAmJiBhLmhpdENhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gYS5oaXRDYWxsYmFjazsKICAgICAgICB9IGVsc2UgaWYgKCBhIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gKCApID0+IHsgYShnYS5jcmVhdGUoKSk7IH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgcG9zID0gYXJncy5pbmRleE9mKCdoaXRDYWxsYmFjaycpOwogICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgJiYgYXJnc1twb3MrMV0gaW5zdGFuY2VvZiBGdW5jdGlvbiApIHsKICAgICAgICAgICAgICAgIGZuID0gYXJnc1twb3MrMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm4oKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgIH0KICAgIH07CiAgICBnYS5jcmVhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRCeU5hbWUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRBbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gW25ldyBUcmFja2VyKCldOwogICAgfTsKICAgIGdhLnJlbW92ZSA9IG5vb3BmbjsKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91QmxvY2tPcmlnaW4vdUFzc2V0cy9pc3N1ZXMvMjEwNwogICAgZ2EubG9hZGVkID0gdHJ1ZTsKICAgIHdbZ2FOYW1lXSA9IGdhOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrL2lzc3Vlcy8zMDc1CiAgICBjb25zdCBkbCA9IHcuZGF0YUxheWVyOwogICAgaWYgKCBkbCBpbnN0YW5jZW9mIE9iamVjdCApIHsKICAgICAgICBpZiAoIGRsLmhpZGUgaW5zdGFuY2VvZiBPYmplY3QgJiYgdHlwZW9mIGRsLmhpZGUuZW5kID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBkbC5oaWRlLmVuZCgpOwogICAgICAgICAgICBkbC5oaWRlLmVuZCA9ICgpPT57fTsKICAgICAgICB9CiAgICAgICAgaWYgKCB0eXBlb2YgZGwucHVzaCA9PT0gJ2Z1bmN0aW9uJyApIHsKICAgICAgICAgICAgY29uc3QgZG9DYWxsYmFjayA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmICggaXRlbSBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgaXRlbS5ldmVudENhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoaXRlbS5ldmVudENhbGxiYWNrLCAxKTsKICAgICAgICAgICAgICAgIGl0ZW0uZXZlbnRDYWxsYmFjayA9ICgpPT57fTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGwucHVzaCA9IG5ldyBQcm94eShkbC5wdXNoLCB7CiAgICAgICAgICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgICAgICAgICAgZG9DYWxsYmFjayhhcmdzWzBdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGRsKSApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHEgPSBkbC5zbGljZSgpOwogICAgICAgICAgICAgICAgZm9yICggY29uc3QgaXRlbSBvZiBxICkgewogICAgICAgICAgICAgICAgICAgIGRvQ2FsbGJhY2soaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAvLyBlbXB0eSBnYSBxdWV1ZQogICAgaWYgKCBnYVF1ZXVlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgQXJyYXkuaXNBcnJheShnYVF1ZXVlLnEpICkgewogICAgICAgIGNvbnN0IHEgPSBnYVF1ZXVlLnEuc2xpY2UoKTsKICAgICAgICBnYVF1ZXVlLnEubGVuZ3RoID0gMDsKICAgICAgICBmb3IgKCBjb25zdCBlbnRyeSBvZiBxICkgewogICAgICAgICAgICBnYSguLi5lbnRyeSk7CiAgICAgICAgfQogICAgfQp9KSgpOwo="},{"name":"google-analytics_cx_api.js","aliases":["google-analytics.com/cx/api.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cuY3hBcGkgPSB7CiAgICAgICAgY2hvb3NlVmFyaWF0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSwKICAgICAgICBnZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRBbGxvd0hhc2g6IG5vb3BmbiwKICAgICAgICBzZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRDb29raWVQYXRoOiBub29wZm4sCiAgICAgICAgc2V0RG9tYWluTmFtZTogbm9vcGZuCiAgICAgICAgfTsKfSkoKTsK"},{"name":"google-analytics_ga.js","aliases":["google-analytics.com/ga.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgR2FxID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgR2FxLnByb3RvdHlwZS5OYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuTyA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuU2EgPSBub29wZm47CiAgICBHYXEucHJvdG90eXBlLlRhID0gbm9vcGZuOwogICAgR2FxLnByb3RvdHlwZS5WYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2NyZWF0ZUFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldEFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICBpZiAoIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBhKCk7IHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGEpID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhanMvbWV0aG9kcy9nYUpTQXBpRG9tYWluRGlyZWN0b3J5I19nYXQuR0FfVHJhY2tlcl8uX2xpbmsKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdUJsb2NrT3JpZ2luL3VCbG9jay1pc3N1ZXMvaXNzdWVzLzE4MDcKICAgICAgICBpZiAoCiAgICAgICAgICAgIHR5cGVvZiBhWzBdID09PSAnc3RyaW5nJyAmJgogICAgICAgICAgICAvKF58XC4pX2xpbmskLy50ZXN0KGFbMF0pICYmCiAgICAgICAgICAgIHR5cGVvZiBhWzFdID09PSAnc3RyaW5nJwogICAgICAgICkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhWzFdKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3JoaWxsL3VCbG9jay9pc3N1ZXMvMjE2MgogICAgICAgIGlmICggYVswXSA9PT0gJ19zZXQnICYmIGFbMV0gPT09ICdoaXRDYWxsYmFjaycgJiYgdHlwZW9mIGFbMl0gPT09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIGFbMl0oKTsKICAgICAgICB9CiAgICB9OwogICAgLy8KICAgIGNvbnN0IHRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3Qgb3V0ID0ge307CiAgICAgICAgY29uc3QgYXBpID0gWwogICAgICAgICAgICAnX2FkZElnbm9yZWRPcmdhbmljIF9hZGRJZ25vcmVkUmVmIF9hZGRJdGVtIF9hZGRPcmdhbmljJywKICAgICAgICAgICAgJ19hZGRUcmFucyBfY2xlYXJJZ25vcmVkT3JnYW5pYyBfY2xlYXJJZ25vcmVkUmVmIF9jbGVhck9yZ2FuaWMnLAogICAgICAgICAgICAnX2Nvb2tpZVBhdGhDb3B5IF9kZWxldGVDdXN0b21WYXIgX2dldE5hbWUgX3NldEFjY291bnQnLAogICAgICAgICAgICAnX2dldEFjY291bnQgX2dldENsaWVudEluZm8gX2dldERldGVjdEZsYXNoIF9nZXREZXRlY3RUaXRsZScsCiAgICAgICAgICAgICdfZ2V0TGlua2VyVXJsIF9nZXRMb2NhbEdpZlBhdGggX2dldFNlcnZpY2VNb2RlIF9nZXRWZXJzaW9uJywKICAgICAgICAgICAgJ19nZXRWaXNpdG9yQ3VzdG9tVmFyIF9pbml0RGF0YSBfbGlua0J5UG9zdCcsCiAgICAgICAgICAgICdfc2V0QWxsb3dBbmNob3IgX3NldEFsbG93SGFzaCBfc2V0QWxsb3dMaW5rZXIgX3NldENhbXBDb250ZW50S2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wTWVkaXVtS2V5IF9zZXRDYW1wTmFtZUtleSBfc2V0Q2FtcE5PS2V5IF9zZXRDYW1wU291cmNlS2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wVGVybUtleSBfc2V0Q2FtcGFpZ25Db29raWVUaW1lb3V0IF9zZXRDYW1wYWlnblRyYWNrIF9zZXRDbGllbnRJbmZvJywKICAgICAgICAgICAgJ19zZXRDb29raWVQYXRoIF9zZXRDb29raWVQZXJzaXN0ZW5jZSBfc2V0Q29va2llVGltZW91dCBfc2V0Q3VzdG9tVmFyJywKICAgICAgICAgICAgJ19zZXREZXRlY3RGbGFzaCBfc2V0RGV0ZWN0VGl0bGUgX3NldERvbWFpbk5hbWUgX3NldExvY2FsR2lmUGF0aCcsCiAgICAgICAgICAgICdfc2V0TG9jYWxSZW1vdGVTZXJ2ZXJNb2RlIF9zZXRMb2NhbFNlcnZlck1vZGUgX3NldFJlZmVycmVyT3ZlcnJpZGUgX3NldFJlbW90ZVNlcnZlck1vZGUnLAogICAgICAgICAgICAnX3NldFNhbXBsZVJhdGUgX3NldFNlc3Npb25UaW1lb3V0IF9zZXRTaXRlU3BlZWRTYW1wbGVSYXRlIF9zZXRTZXNzaW9uQ29va2llVGltZW91dCcsCiAgICAgICAgICAgICdfc2V0VmFyIF9zZXRWaXNpdG9yQ29va2llVGltZW91dCBfdHJhY2tFdmVudCBfdHJhY2tQYWdlTG9hZFRpbWUnLAogICAgICAgICAgICAnX3RyYWNrUGFnZXZpZXcgX3RyYWNrU29jaWFsIF90cmFja1RpbWluZyBfdHJhY2tUcmFucycsCiAgICAgICAgICAgICdfdmlzaXRDb2RlJwogICAgICAgIF0uam9pbignICcpLnNwbGl0KC9ccysvKTsKICAgICAgICBmb3IgKCBjb25zdCBtZXRob2Qgb2YgYXBpICkgewogICAgICAgICAgICBvdXRbbWV0aG9kXSA9IG5vb3BmbjsKICAgICAgICB9CiAgICAgICAgb3V0Ll9nZXRMaW5rZXJVcmwgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH07CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0FkZ3VhcmRUZWFtL1NjcmlwdGxldHMvaXNzdWVzLzE1NAogICAgICAgIG91dC5fbGluayA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gb3V0OwogICAgfSkoKTsKICAgIC8vCiAgICBjb25zdCBHYXQgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9hbm9ueW1pemVJUCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2NyZWF0ZVRyYWNrZXIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLl9mb3JjZVNTTCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFRyYWNrZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHJhY2tlcjsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9nZXRUcmFja2VyQnlOYW1lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRyYWNrZXI7CiAgICB9OwogICAgR2F0LnByb3RvdHlwZS5fZ2V0VHJhY2tlcnMgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmFhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5hYiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuaGIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmxhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5vYSA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUucGEgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLnUgPSBub29wZm47CiAgICBjb25zdCBnYXQgPSBuZXcgR2F0KCk7CiAgICB3aW5kb3cuX2dhdCA9IGdhdDsKICAgIC8vCiAgICBjb25zdCBnYXEgPSBuZXcgR2FxKCk7CiAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgYWEgPSB3aW5kb3cuX2dhcSB8fCBbXTsKICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoYWEpICkgewogICAgICAgICAgICB3aGlsZSAoIGFhWzBdICkgewogICAgICAgICAgICAgICAgZ2FxLnB1c2goYWEuc2hpZnQoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSgpOwogICAgd2luZG93Ll9nYXEgPSBnYXEucWYgPSBnYXE7Cn0pKCk7Cg=="},{"name":"google-analytics_inpage_linkid.js","aliases":["google-analytics.com/inpage_linkid.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuX2dhcSA9IHdpbmRvdy5fZ2FxIHx8IHsKICAgICAgICBwdXNoOiBmdW5jdGlvbigpIHsKICAgICAgICB9CiAgICB9Owp9KSgpOwo="},{"name":"google-ima.js","aliases":["google-ima3"],"kind":{"mime":"application/javascript"},"content":""},{"name":"googlesyndication_adsbygoogle.js","aliases":["googlesyndication.com/adsbygoogle.js","googlesyndication-adsbygoogle"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBpbml0ID0gKCApID0+IHsKICAgICAgICB3aW5kb3cuYWRzYnlnb29nbGUgPSB7CiAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSwKICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IHBocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hZHNieWdvb2dsZScpOwogICAgICAgIGNvbnN0IGNzcyA9ICdoZWlnaHQ6MXB4IWltcG9ydGFudDttYXgtaGVpZ2h0OjFweCFpbXBvcnRhbnQ7bWF4LXdpZHRoOjFweCFpbXBvcnRhbnQ7d2lkdGg6MXB4IWltcG9ydGFudDsnOwogICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHBocy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgY29uc3QgaWQgPSBgYXN3aWZ0XyR7aX1gOwogICAgICAgICAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlmcmFtZSMke2lkfWApICE9PSBudWxsICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBjb25zdCBmciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogICAgICAgICAgICBmci5pZCA9IGlkOwogICAgICAgICAgICBmci5zdHlsZSA9IGNzczsKICAgICAgICAgICAgY29uc3QgY2ZyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgICAgIGNmci5pZCA9IGBnb29nbGVfYWRzX2ZyYW1lJHtpfWA7CiAgICAgICAgICAgIGZyLmFwcGVuZENoaWxkKGNmcik7CiAgICAgICAgICAgIHBoc1tpXS5hcHBlbmRDaGlsZChmcik7CiAgICAgICAgfQogICAgfTsKICAgIGlmICgKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWRzYnlnb29nbGUnKS5sZW5ndGggPT09IDAgJiYKICAgICAgICBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycKICAgICkgewogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdCwgeyBvbmNlOiB0cnVlIH0pOwogICAgfSBlbHNlIHsKICAgICAgICBpbml0KCk7CiAgICB9Cn0pKCk7CgovKgpwYWdlYWQyLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9wYWdlYWQvanMvYWRzYnlnb29nbGUuanMsYWRzYnlnb29nbGUtcGxhY2Vob2xkZXIsYWRzYnlnb29nbGVTdGF0dXMsZ29vZ2xlX2FkX2NoYW5uZWwsZ29vZ2xlX2FkX2NsaWVudCxnb29nbGVfYWRfZm9ybWF0LGdvb2dsZV9hZF9mcmVxdWVuY3lfaGludCxnb29nbGVfYWRfaGVpZ2h0LGdvb2dsZV9hZF9ob3N0LGdvb2dsZV9hZF9ob3N0X2NoYW5uZWwsZ29vZ2xlX2FkX21vZGlmaWNhdGlvbnMsZ29vZ2xlX2FkX3JlZ2lvbixnb29nbGVfYWRfcmVzaXphYmxlLGdvb2dsZV9hZF9yZXNpemUsZ29vZ2xlX2FkX3NlY3Rpb24sZ29vZ2xlX2FkX3NlbWFudGljX2FyZWEsZ29vZ2xlX2FkX3dpZHRoLGdvb2dsZV9hZGJyZWFrX3Rlc3QsZ29vZ2xlX2Fkc19mcmFtZSxnb29nbGVfYWRzX2lmcmFtZSxnb29nbGVfYWR0ZXN0LGdvb2dsZV9hZG1vYl9pbnRlcnN0aXRpYWxfc2xvdCxnb29nbGVfYWRtb2JfcmV3YXJkZWRfc2xvdCxnb29nbGVfYWRtb2JfYWRzX29ubHksZ29vZ2xlLWFkc2Vuc2UtcGxhdGZvcm0tYWNjb3VudCxnb29nbGVfYWRzZW5zZV9zZXR0aW5ncyxnb29nbGVfYW1hX2NvbmZpZyxnb29nbGUtYW1hLW9yZGVyLWFzc3VyYW5jZSxnb29nbGVfYW1hX3NldHRpbmdzLGdvb2dsZV9hbWFfc3RhdGUsZ29vZ2xlX2FwbHRsYWQsZ29vZ2xlX2F1ZGlvX3NlbnNlLGdvb2dsZS1hdXRvLXBsYWNlZC1yZWFkLWFsb3VkLXBsYXllci1yZXNlcnZlZCxnb29nbGVfZGVidWdfcGFyYW1zLGdvb2dsZV9mdWxsX3dpZHRoX3Jlc3BvbnNpdmUsZ29vZ2xlX2Z1bGxfd2lkdGhfcmVzcG9uc2l2ZV9hbGxvd2VkLGdvb2dsZV9pbWFnZV9yZXF1ZXN0cyxnb29nbGVfanNfZXJyb3JzLGdvb2dsZV9qc19yZXBvcnRpbmdfcXVldWUsZ29vZ2xlX2xvYWRlcl9mZWF0dXJlc191c2VkLGdvb2dsZV9sbHAsZ29vZ2xlX2xvZ2dpbmdfcXVldWUsZ29vZ2xlX21heF9hZF9jb250ZW50X3JhdGluZyxnb29nbGVfbWVhc3VyZV9qc190aW1pbmcsZ29vZ2xlX21sX3JhbmssZ29vZ2xlX292ZXJsYXlzLGdvb2dsZV9vdmVycmlkZV9mb3JtYXQsZ29vZ2xlX3BhY2thZ2UsZ29vZ2xlX3BhZ2VfdXJsLGdvb2dsZV9wZXJzaXN0ZW50X3N0YXRlX2FzeW5jLGdvb2dsZV9wZ2JfcmVhY3RpdmUsZ29vZ2xlX3BsYWNlbWVudF9pZCxnb29nbGVfcHJldl9hZF9mb3JtYXRzX2J5X3JlZ2lvbixnb29nbGVfcHJldl9hZF9zbG90bmFtZXNfYnlfcmVnaW9uLGdvb2dsZV9yZWFjdGl2ZV9hZF9mb3JtYXQsZ29vZ2xlX3JlYWN0aXZlX2Fkc19nbG9iYWxfc3RhdGUsZ29vZ2xlX3Jlc2l6aW5nX2hlaWdodCxnb29nbGVfcmVzaXppbmdfd2lkdGgsZ29vZ2xlX3Jlc3BvbnNpdmVfYXV0b19mb3JtYXQsZ29vZ2xlX3Jlc3BvbnNpdmVfZHVtbXlfYWQsZ29vZ2xlX3Jlc3BvbnNpdmVfZm9ybWF0cyxnb29nbGVfcmVzdHJpY3RfZGF0YV9wcm9jZXNzaW5nLGdvb2dsZV9ydW1fdGFza19pZF9jb3VudGVyLGdvb2dsZV9zYWZlX2Zvcl9yZXNwb25zaXZlX292ZXJyaWRlLGdvb2dsZV9zaGFkb3dfbW9kZSxnb29nbGVfc3J0LGdvb2dsZV90YWdfZm9yX3VuZGVyX2FnZV9vZl9jb25zZW50LGdvb2dsZV90YWdfb3JpZ2luLGdvb2dsZV90YWdfcGFydG5lcixnb29nbGVfdHJhZmZpY19zb3VyY2UsZ29vZ2xlX3VuaXF1ZV9pZCxnb29nbGV0YWcKKi8K"},{"name":"googletagservices_gpt.js","aliases":["googletagservices.com/gpt.js","googletagservices-gpt"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9kb3VibGVjbGljay1ncHQvcmVmZXJlbmNlCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH0uYmluZCgpOwogICAgY29uc3Qgbm9vcHRoaXNmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIGNvbnN0IG5vb3BudWxsZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICBjb25zdCBub29wYXJyYXlmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBbXTsKICAgIH07CiAgICBjb25zdCBub29wc3RyZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9OwogICAgLy8KICAgIGNvbnN0IGNvbXBhbmlvbkFkc1NlcnZpY2UgPSB7CiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogbm9vcHRoaXNmbiwKICAgICAgICBlbmFibGVTeW5jTG9hZGluZzogbm9vcGZuLAogICAgICAgIHNldFJlZnJlc2hVbmZpbGxlZFNsb3RzOiBub29wZm4KICAgIH07CiAgICBjb25zdCBjb250ZW50U2VydmljZSA9IHsKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBub29wdGhpc2ZuLAogICAgICAgIHNldENvbnRlbnQ6IG5vb3BmbgogICAgfTsKICAgIGNvbnN0IFBhc3NiYWNrU2xvdCA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGxldCBwID0gUGFzc2JhY2tTbG90LnByb3RvdHlwZTsKICAgIHAuZGlzcGxheSA9IG5vb3BmbjsKICAgIHAuZ2V0ID0gbm9vcG51bGxmbjsKICAgIHAuc2V0ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2xpY2tVcmwgPSBub29wdGhpc2ZuOwogICAgcC5zZXRUYWdGb3JDaGlsZERpcmVjdGVkVHJlYXRtZW50ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0VGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAudXBkYXRlVGFyZ2V0aW5nRnJvbU1hcCA9IG5vb3B0aGlzZm47CiAgICBjb25zdCBwdWJBZHNTZXJ2aWNlID0gewogICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXI6IG5vb3BmbiwKICAgICAgICBjbGVhckNhdGVnb3J5RXhjbHVzaW9uczogbm9vcHRoaXNmbiwKICAgICAgICBjbGVhclRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXJUYXJnZXRpbmc6IG5vb3B0aGlzZm4sCiAgICAgICAgY29sbGFwc2VFbXB0eURpdnM6IG5vb3BmbiwKICAgICAgICBkZWZpbmVPdXRPZlBhZ2VQYXNzYmFjazogZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgUGFzc2JhY2tTbG90KCk7IH0sCiAgICAgICAgZGVmaW5lUGFzc2JhY2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFBhc3NiYWNrU2xvdCgpOyB9LAogICAgICAgIGRpc2FibGVJbml0aWFsTG9hZDogbm9vcGZuLAogICAgICAgIGRpc3BsYXk6IG5vb3BmbiwKICAgICAgICBlbmFibGVBc3luY1JlbmRlcmluZzogbm9vcGZuLAogICAgICAgIGVuYWJsZUxhenlMb2FkOiBub29wZm4sCiAgICAgICAgZW5hYmxlU2luZ2xlUmVxdWVzdDogbm9vcGZuLAogICAgICAgIGVuYWJsZVN5bmNSZW5kZXJpbmc6IG5vb3BmbiwKICAgICAgICBlbmFibGVWaWRlb0Fkczogbm9vcGZuLAogICAgICAgIGdldDogbm9vcG51bGxmbiwKICAgICAgICBnZXRBdHRyaWJ1dGVLZXlzOiBub29wYXJyYXlmbiwKICAgICAgICBnZXRUYXJnZXRpbmc6IG5vb3BhcnJheWZuLAogICAgICAgIGdldFRhcmdldGluZ0tleXM6IG5vb3BhcnJheWZuLAogICAgICAgIGdldFNsb3RzOiBub29wYXJyYXlmbiwKICAgICAgICByZWZyZXNoOiBub29wZm4sCiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogbm9vcGZuLAogICAgICAgIHNldDogbm9vcHRoaXNmbiwKICAgICAgICBzZXRDYXRlZ29yeUV4Y2x1c2lvbjogbm9vcHRoaXNmbiwKICAgICAgICBzZXRDZW50ZXJpbmc6IG5vb3BmbiwKICAgICAgICBzZXRDb29raWVPcHRpb25zOiBub29wdGhpc2ZuLAogICAgICAgIHNldEZvcmNlU2FmZUZyYW1lOiBub29wdGhpc2ZuLAogICAgICAgIHNldExvY2F0aW9uOiBub29wdGhpc2ZuLAogICAgICAgIHNldFB1Ymxpc2hlclByb3ZpZGVkSWQ6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0UHJpdmFjeVNldHRpbmdzOiBub29wdGhpc2ZuLAogICAgICAgIHNldFJlcXVlc3ROb25QZXJzb25hbGl6ZWRBZHM6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0U2FmZUZyYW1lQ29uZmlnOiBub29wdGhpc2ZuLAogICAgICAgIHNldFRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nOiBub29wdGhpc2ZuLAogICAgICAgIHNldFZpZGVvQ29udGVudDogbm9vcHRoaXNmbiwKICAgICAgICB1cGRhdGVDb3JyZWxhdG9yOiBub29wZm4KICAgIH07CiAgICBjb25zdCBTaXplTWFwcGluZ0J1aWxkZXIgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwID0gU2l6ZU1hcHBpbmdCdWlsZGVyLnByb3RvdHlwZTsKICAgIHAuYWRkU2l6ZSA9IG5vb3B0aGlzZm47CiAgICBwLmJ1aWxkID0gbm9vcG51bGxmbjsKICAgIGNvbnN0IFNsb3QgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwID0gU2xvdC5wcm90b3R5cGU7CiAgICBwLmFkZFNlcnZpY2UgPSBub29wdGhpc2ZuOwogICAgcC5jbGVhckNhdGVnb3J5RXhjbHVzaW9ucyA9IG5vb3B0aGlzZm47CiAgICBwLmNsZWFyVGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAuZGVmaW5lU2l6ZU1hcHBpbmcgPSBub29wdGhpc2ZuOwogICAgcC5nZXQgPSBub29wbnVsbGZuOwogICAgcC5nZXRBZFVuaXRQYXRoID0gbm9vcGFycmF5Zm47CiAgICBwLmdldEF0dHJpYnV0ZUtleXMgPSBub29wYXJyYXlmbjsKICAgIHAuZ2V0Q2F0ZWdvcnlFeGNsdXNpb25zID0gbm9vcGFycmF5Zm47CiAgICBwLmdldERvbUlkID0gbm9vcHN0cmZuOwogICAgcC5nZXRSZXNwb25zZUluZm9ybWF0aW9uID0gbm9vcG51bGxmbjsKICAgIHAuZ2V0U2xvdEVsZW1lbnRJZCA9IG5vb3BzdHJmbjsKICAgIHAuZ2V0U2xvdElkID0gbm9vcHRoaXNmbjsKICAgIHAuZ2V0VGFyZ2V0aW5nID0gbm9vcGFycmF5Zm47CiAgICBwLmdldFRhcmdldGluZ0tleXMgPSBub29wYXJyYXlmbjsKICAgIHAuc2V0ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2F0ZWdvcnlFeGNsdXNpb24gPSBub29wdGhpc2ZuOwogICAgcC5zZXRDbGlja1VybCA9IG5vb3B0aGlzZm47CiAgICBwLnNldENvbGxhcHNlRW1wdHlEaXYgPSBub29wdGhpc2ZuOwogICAgcC5zZXRUYXJnZXRpbmcgPSBub29wdGhpc2ZuOwogICAgcC51cGRhdGVUYXJnZXRpbmdGcm9tTWFwID0gbm9vcHRoaXNmbjsKICAgIC8vCiAgICBjb25zdCBncHQgPSB3aW5kb3cuZ29vZ2xldGFnIHx8IHt9OwogICAgY29uc3QgY21kID0gZ3B0LmNtZCB8fCBbXTsKICAgIGdwdC5hcGlSZWFkeSA9IHRydWU7CiAgICBncHQuY21kID0gW107CiAgICBncHQuY21kLnB1c2ggPSBmdW5jdGlvbihhKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgYSgpOwogICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxOwogICAgfTsKICAgIGdwdC5jb21wYW5pb25BZHMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBhbmlvbkFkc1NlcnZpY2U7IH07CiAgICBncHQuY29udGVudCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29udGVudFNlcnZpY2U7IH07CiAgICBncHQuZGVmaW5lT3V0T2ZQYWdlU2xvdCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFNsb3QoKTsgfTsKICAgIGdwdC5kZWZpbmVTbG90ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU2xvdCgpOyB9OwogICAgZ3B0LmRlc3Ryb3lTbG90cyA9IG5vb3BmbjsKICAgIGdwdC5kaXNhYmxlUHVibGlzaGVyQ29uc29sZSA9IG5vb3BmbjsKICAgIGdwdC5kaXNwbGF5ID0gbm9vcGZuOwogICAgZ3B0LmVuYWJsZVNlcnZpY2VzID0gbm9vcGZuOwogICAgZ3B0LmdldFZlcnNpb24gPSBub29wc3RyZm47CiAgICBncHQucHViYWRzID0gZnVuY3Rpb24oKSB7IHJldHVybiBwdWJBZHNTZXJ2aWNlOyB9OwogICAgZ3B0LnB1YmFkc1JlYWR5ID0gdHJ1ZTsKICAgIGdwdC5zZXRBZElmcmFtZVRpdGxlID0gbm9vcGZuOwogICAgZ3B0LnNpemVNYXBwaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU2l6ZU1hcHBpbmdCdWlsZGVyKCk7IH07CiAgICB3aW5kb3cuZ29vZ2xldGFnID0gZ3B0OwogICAgd2hpbGUgKCBjbWQubGVuZ3RoICE9PSAwICkgewogICAgICAgIGdwdC5jbWQucHVzaChjbWQuc2hpZnQoKSk7CiAgICB9Cn0pKCk7Cg=="},{"name":"hd-main.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsID0ge307CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBwcm9wcyA9IFsKICAgICAgICAiJGoiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIk5qIiwiT2MiLCJQYyIsIlBlIiwKICAgICAgICAiUWMiLCJRZSIsIlJjIiwiUmUiLCJSaSIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJXZyIsIlhjIiwiWGciLCJZYyIsIllkIiwKICAgICAgICAiYWQiLCJhZSIsImJkIiwiYmYiLCJjZCIsImRkIiwiZWQiLCJlZiIsImVrIiwiZmQiLCJmZyIsImZoIiwiZmsiLCJnZCIsImhkIiwKICAgICAgICAiaWciLCJpaiIsImpkIiwia2QiLCJrZSIsImxkIiwibWQiLCJtaSIsIm5kIiwib2QiLCJvaCIsInBkIiwicGYiLCJxZCIsInJkIiwKICAgICAgICAic2QiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsIndnIiwieGQiLCJ4aCIsInlkIiwiemQiLAogICAgICAgICIkZCIsIiRlIiwiJGsiLCJBZSIsIkFmIiwiQWoiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkVrIiwiRW8iLCJFcCIsIkZlIiwiRm8iLAogICAgICAgICJHZSIsIkdoIiwiSGsiLCJJZSIsIklwIiwiSmUiLCJLZSIsIktrIiwiS3EiLCJMZSIsIkxoIiwiTGsiLCJNZSIsIk1tIiwiTmUiLAogICAgICAgICJPZSIsIlBlIiwiUWUiLCJSZSIsIlJwIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJWcCIsIldlIiwiWGQiLCJYZSIsIllkIiwiWWUiLAogICAgICAgICJaZCIsIlplIiwiWmYiLCJaayIsImFlIiwiYWYiLCJhbCIsImJlIiwiYmYiLCJiZyIsImNlIiwiY3AiLCJkZiIsImRpIiwiZWUiLAogICAgICAgICJlZiIsImZlIiwiZmYiLCJnZiIsImdtIiwiaGUiLCJoZiIsImllIiwiamUiLCJqZiIsImtlIiwia2YiLCJrbCIsImxlIiwibGYiLAogICAgICAgICJsayIsIm1mIiwibWciLCJtbiIsIm5mIiwib2UiLCJvZiIsInBlIiwicGYiLCJwZyIsInFlIiwicWYiLCJyZSIsInJmIiwic2UiLAogICAgICAgICJzZiIsInRlIiwidGYiLCJ0aSIsInVlIiwidWYiLCJ2ZSIsInZmIiwid2UiLCJ3ZiIsIndnIiwid2kiLCJ4ZSIsInllIiwieWYiLAogICAgICAgICJ5ayIsInlsIiwiemUiLCJ6ZiIsInprIgogICAgXTsKICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrICkgewogICAgICAgIGxbcHJvcHNbaV1dID0gbm9vcGZuOwogICAgfQogICAgd2luZG93LkwgPSB3aW5kb3cuSiA9IGw7Cn0pKCk7Cg=="},{"name":"nobab.js","aliases":["bab-defuser.js","prevent-bab.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzaWduYXR1cmVzID0gWwogICAgICAgIFsgJ2Jsb2NrYWRibG9jaycgXSwKICAgICAgICBbICdiYWJhc2JtJyBdLAogICAgICAgIFsgL2dldEl0ZW1cKCdiYWJuJ1wpLyBdLAogICAgICAgIFsKICAgICAgICAgICAgJ2dldEVsZW1lbnRCeUlkJywKICAgICAgICAgICAgJ1N0cmluZy5mcm9tQ2hhckNvZGUnLAogICAgICAgICAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknLAogICAgICAgICAgICAnY2hhckF0JywKICAgICAgICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogICAgICAgICAgICAnQWRCbG9jaycsCiAgICAgICAgICAgICdhZGRFdmVudExpc3RlbmVyJywKICAgICAgICAgICAgJ2RvU2Nyb2xsJywKICAgICAgICAgICAgJ2Zyb21DaGFyQ29kZScsCiAgICAgICAgICAgICc8PDJ8cj4+NCcsCiAgICAgICAgICAgICdzZXNzaW9uU3RvcmFnZScsCiAgICAgICAgICAgICdjbGllbnRXaWR0aCcsCiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLAogICAgICAgICAgICAnTWF0aCcsCiAgICAgICAgICAgICdyYW5kb20nCiAgICAgICAgXSwKICAgIF07CiAgICBjb25zdCBjaGVjayA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBzaWduYXR1cmVzW2ldOwogICAgICAgICAgICBsZXQgbWF0Y2ggPSAwOwogICAgICAgICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCB0b2tlbnMubGVuZ3RoOyBqKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tqXTsKICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRva2VuIGluc3RhbmNlb2YgUmVnRXhwCiAgICAgICAgICAgICAgICAgICAgPyBzLnNlYXJjaCh0b2tlbikKICAgICAgICAgICAgICAgICAgICA6IHMuaW5kZXhPZih0b2tlbik7CiAgICAgICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgKSB7IG1hdGNoICs9IDE7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIChtYXRjaCAvIHRva2Vucy5sZW5ndGgpID49IDAuOCApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIHdpbmRvdy5ldmFsID0gbmV3IFByb3h5KHdpbmRvdy5ldmFsLCB7ICAgICAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBjb25zdCBhID0gYXJnc1swXTsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgfHwgIWNoZWNrKGEpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGRvY3VtZW50LmJvZHkgKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd2aXNpYmlsaXR5Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhYmFzYm1zZ3gnKTsKICAgICAgICAgICAgaWYgKCBlbCApIHsKICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICB3aW5kb3cuc2V0VGltZW91dCA9IG5ldyBQcm94eSh3aW5kb3cuc2V0VGltZW91dCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYSA9IGFyZ3NbMF07CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIHR5cGVvZiBhICE9PSAnc3RyaW5nJyB8fAogICAgICAgICAgICAgICAgL1wuYmFiX2VsZW1lbnRpZC4kLy50ZXN0KGEpID09PSBmYWxzZQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfSkoKTsK"},{"name":"nobab2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0OwogICAgaWYgKCBzY3JpcHQgPT09IG51bGwgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3JjID0gc2NyaXB0LnNyYzsKICAgIGlmICggdHlwZW9mIHNyYyAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgLy8gVGhlIHNjcmlwbGV0IGlzIG1lYW50IHRvIGFjdCBPTkxZIHdoZW4gaXQncyBiZWluZyB1c2VkIGFzIGEgcmVkaXJlY3Rpb24KICAgIC8vIGZvciBzcGVjaWZpYyBkb21haW5zLgogICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKAogICAgICAgICdeaHR0cHM/Oi8vW1xcdy1dK1xcLignICsKICAgICAgICBbCiAgICAgICAgICAgICdhZGNsaXh4XFwubmV0JywKICAgICAgICAgICAgJ2FkbmV0YXNpYVxcLmNvbScsCiAgICAgICAgICAgICdhZHRyYWNrZXJzXFwubmV0JywKICAgICAgICAgICAgJ2Jhbm5lcnRyYWNrXFwubmV0JywKICAgICAgICBdLmpvaW4oJ3wnKSArCiAgICAgICAgJykvLicKICAgICk7CiAgICBpZiAoIHJlLnRlc3Qoc3JjKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgd2luZG93Lm5IN2VYek9zRyA9IDg1ODsKfSkoKTsK"},{"name":"noeval.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsb2cgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOwogICAgd2luZG93LmV2YWwgPSBuZXcgUHJveHkod2luZG93LmV2YWwsIHsgICAgICAgICAgLy8ganNoaW50IGlnbm9yZTogbGluZQogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgbG9nKGBEb2N1bWVudCB0cmllZCB0byBldmFsLi4uICR7YXJnc1swXX1cbmApOwogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"noeval-silent.js","aliases":["silent-noeval.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuZXZhbCA9IG5ldyBQcm94eSh3aW5kb3cuZXZhbCwgeyAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"nofab.js","aliases":["fuckadblock.js-3.2.0"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBGYWIgPSBmdW5jdGlvbigpIHt9OwogICAgRmFiLnByb3RvdHlwZS5jaGVjayA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuY2xlYXJFdmVudCA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuZW1pdEV2ZW50ID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICBpZiAoICFhICkgeyBiKCk7IH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uRGV0ZWN0ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uTm90RGV0ZWN0ZWQgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgYSgpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIEZhYi5wcm90b3R5cGUuc2V0T3B0aW9uID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vcHRpb25zID0gewogICAgICAgIHNldDogbm9vcGZuLAogICAgICAgIGdldDogbm9vcGZuLAogICAgfTsKICAgIGNvbnN0IGZhYiA9IG5ldyBGYWIoKTsKICAgIGNvbnN0IGdldFNldEZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gRmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGNvbnN0IGdldHNldGZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdGdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuRnVja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnRnVja0FkQmxvY2snLCBnZXRTZXRGYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnQmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5CbG9ja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnQmxvY2tBZEJsb2NrJywgZ2V0U2V0RmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ1NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuU25pZmZBZEJsb2NrID0gRmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NuaWZmQWRCbG9jaycsIGdldFNldEZhYik7IH0KICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdmdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuZnVja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnZnVja0FkQmxvY2snLCBnZXRzZXRmYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnYmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5ibG9ja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnYmxvY2tBZEJsb2NrJywgZ2V0c2V0ZmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ3NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuc25pZmZBZEJsb2NrID0gZmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3NuaWZmQWRCbG9jaycsIGdldHNldGZhYik7IH0KfSkoKTsK"},{"name":"noop-0.1s.mp3","aliases":["noopmp3-0.1s","abp-resource:blank-mp3"],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAADAABgYGBgYGBgYGBgYGBgYGBggICAgICAgICAgICAgICAgICgoKCgoKCgoKCgoKCgoKCgwMDAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODg4ODg4ODg4P////////////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAAwDNZKlY//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-0.5s.mp3","aliases":[],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAWAAAJAAAgICAgKioqKio1NTU1QEBAQEBKSkpKVVVVVVVgYGBgampqamp1dXV1gICAgICKioqKlZWVlZWgoKCgoKqqqqq1tbW1tcDAwMDKysrKytXV1dXg4ODg4Orq6ur19fX19f////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAMAAAAAAAAACQDI0dkC//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZLQP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZNIP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-1s.mp4","aliases":["noopmp4-1s","abp-resource:blank-mp4"],"kind":{"mime":"video/mp4"},"content":"AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2YzhkOCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAgZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxfaHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEASZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAGQZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJkAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAAAAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRraEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEAAAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsAAAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28AAAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAAAASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4AAAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABnc3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAAA4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIAAAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEAAAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIAAAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEAAAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIAAAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEAAAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oAAAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UAAANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUAAATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw"},{"name":"noop.css","aliases":[],"kind":{"mime":"text/css"},"content":"LyogKi8K"},{"name":"noop.html","aliases":["noopframe"],"kind":{"mime":"text/html"},"content":"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+PHRpdGxlPjwvdGl0bGU+PC9oZWFkPgogICAgPGJvZHk+PC9ib2R5Pgo8L2h0bWw+Cg=="},{"name":"noop.js","aliases":["noopjs","abp-resource:blank-js"],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwp9KSgpOwo="},{"name":"noop.json","aliases":["noopjson"],"kind":{"mime":"application/json"},"content":"e30="},{"name":"noop.txt","aliases":["nooptext"],"kind":{"mime":"text/plain"},"content":"Cg=="},{"name":"noop-vmap1.0.xml","aliases":["noopvmap-1.0"],"kind":{"mime":"text/xml"},"content":"PHZtYXA6Vk1BUCB4bWxuczp2bWFwPSJodHRwOi8vd3d3LmlhYi5uZXQvdmlkZW9zdWl0ZS92bWFwIiB2ZXJzaW9uPSIxLjAiPjwvdm1hcDpWTUFQPgo="},{"name":"outbrain-widget.js","aliases":["widgets.outbrain.com/outbrain.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBvYnIgPSB7fTsKICAgIGNvbnN0IG1ldGhvZHMgPSBbCiAgICAgICAgJ2NhbGxDbGljaycsCiAgICAgICAgJ2NhbGxMb2FkTW9yZScsCiAgICAgICAgJ2NhbGxSZWNzJywKICAgICAgICAnY2FsbFVzZXJaYXBwaW5nJywKICAgICAgICAnY2FsbFdoYXRJcycsCiAgICAgICAgJ2NhbmNlbFJlY29tbWVuZGF0aW9uJywKICAgICAgICAnY2FuY2VsUmVjcycsCiAgICAgICAgJ2Nsb3NlQ2FyZCcsCiAgICAgICAgJ2Nsb3NlTW9kYWwnLAogICAgICAgICdjbG9zZVRieCcsCiAgICAgICAgJ2Vycm9ySW5qZWN0aW9uSGFuZGxlcicsCiAgICAgICAgJ2dldENvdW50T2ZSZWNzJywKICAgICAgICAnZ2V0U3RhdCcsCiAgICAgICAgJ2ltYWdlRXJyb3InLAogICAgICAgICdtYW51YWxWaWRlb0NsaWNrZWQnLAogICAgICAgICdvbk9kYlJldHVybicsCiAgICAgICAgJ29uVmlkZW9DbGljaycsCiAgICAgICAgJ3BhZ2VyTG9hZCcsCiAgICAgICAgJ3JlY0NsaWNrZWQnLAogICAgICAgICdyZWZyZXNoU3BlY2lmaWNXaWRnZXQnLAogICAgICAgICdyZW5kZXJTcGFXaWRnZXRzJywKICAgICAgICAncmVmcmVzaFdpZGdldCcsCiAgICAgICAgJ3JlbG9hZFdpZGdldCcsCiAgICAgICAgJ3Jlc2VhcmNoV2lkZ2V0JywKICAgICAgICAncmV0dXJuZWRFcnJvcicsCiAgICAgICAgJ3JldHVybmVkSHRtbERhdGEnLAogICAgICAgICdyZXR1cm5lZElyZERhdGEnLAogICAgICAgICdyZXR1cm5lZEpzb25EYXRhJywKICAgICAgICAnc2Nyb2xsTG9hZCcsCiAgICAgICAgJ3Nob3dEZXNjcmlwdGlvbicsCiAgICAgICAgJ3Nob3dSZWNJbklmcmFtZScsCiAgICAgICAgJ3VzZXJaYXBwaW5nTWVzc2FnZScsCiAgICAgICAgJ3phcHBpbmdGb3JtQWN0aW9uJwogICAgXTsKICAgIG9ici5leHRlcm4gPSB7CiAgICAgICAgdmlkZW86IHsKICAgICAgICAgICAgZ2V0VmlkZW9SZWNzOiBub29wZm4sCiAgICAgICAgICAgIHZpZGVvQ2xpY2tlZDogbm9vcGZuCiAgICAgICAgfQogICAgfTsKICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihhKSB7CiAgICAgICAgb2JyLmV4dGVyblthXSA9IG5vb3BmbjsKICAgIH0pOwogICAgd2luZG93Lk9CUiA9IHdpbmRvdy5PQlIgfHwgb2JyOwp9KSgpOwo="},{"name":"popads.js","aliases":["popads.net.js","prevent-popads-net.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBtYWdpYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7CiAgICBjb25zdCBvZSA9IHdpbmRvdy5vbmVycm9yOwogICAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcikgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluZGV4T2YobWFnaWMpICE9PSAtMSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZShtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcik7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICBjb25zdCB0aHJvd01hZ2ljID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtYWdpYyk7IH07CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgc2V0OiB0aHJvd01hZ2ljIH0sCiAgICAgICAgcG9wbnM6IHsgc2V0OiB0aHJvd01hZ2ljIH0KICAgIH0pOwp9KSgpOwo="},{"name":"popads-dummy.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgdmFsdWU6IHt9IH0sCiAgICAgICAgcG9wbnM6IHsgdmFsdWU6IHt9IH0KICAgIH0pOwp9KSgpOwo="},{"name":"prebid-ads.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuY2FuUnVuQWRzID0gdHJ1ZTsKICAgIHdpbmRvdy5pc0FkQmxvY2tBY3RpdmUgPSBmYWxzZTsKfSkoKTsK"},{"name":"scorecardresearch_beacon.js","aliases":["scorecardresearch.com/beacon.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuQ09NU0NPUkUgPSB7CiAgICAgICAgcHVyZ2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB3aW5kb3cuX2NvbXNjb3JlID0gW107CiAgICAgICAgfSwKICAgICAgICBiZWFjb246IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH07Cn0pKCk7Cg=="},{"name":"async-sugarcoat-04394153a7ce417b88e3fe1790a4e6a269bfebe5.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"async-sugarcoat-8a459c41783885dc83d30f5b7da2359091f4e607.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"brave-disable-pageview-api.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWRpc2FibGUtcGFnZXZpZXctYXBpLmpzCi8vIEJhc2VkIG9uOiBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9maXJlZm94L2FkZG9uL2Rpc2FibGUtcGFnZS12aXNpYmlsaXR5LwovLyBMaWNlbnNlOiAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHAKLy8gRnJvbTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3dhcnNlci8zYjQ3YjYxODYzYmZmY2ZlYmU0NDk4Yzc3YjIzMDFjZAooZnVuY3Rpb24oKXsKLy8gdmlzaWJpbGl0eWNoYW5nZSBldmVudHMgYXJlIGNhcHR1cmVkIGFuZCBzdG9wcGVkIApkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIiwgZnVuY3Rpb24oZSkgewogICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKfSwgdHJ1ZSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyBmYWxzZQpPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnQucHJvdG90eXBlLCAiaGlkZGVuIiwgewogICAgZ2V0OiBmdW5jdGlvbiBoaWRkZW4oKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUKfSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyAidmlzaWJsZSIKT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50LnByb3RvdHlwZSwgInZpc2liaWxpdHlTdGF0ZSIsIHsKICAgIGdldDogZnVuY3Rpb24gdmlzaWJpbGl0eVN0YXRlKCkgewogICAgICAgIHJldHVybiAidmlzaWJsZSI7CiAgICB9LAogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQp9KTsKfSkoKQo="},{"name":"brave-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWZpeC5qcwovLy8gYWxpYXMgYmYuanMKZGVsZXRlIE5hdmlnYXRvci5wcm90b3R5cGUuYnJhdmUKZGVsZXRlIHdpbmRvdy5uYXZpZ2F0b3IuYnJhdmUK"},{"name":"brave-google-maps-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vYnJhdmUvYnJhdmUtYnJvd3Nlci9pc3N1ZXMvMzcwNzUKKCgpID0+IHsKICBpZiAobG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgiL21hcHMvIikgfHwgbG9jYXRpb24ucGF0aG5hbWUgPT09ICIvbWFwcyIpIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJHTFNoYWRlclByZWNpc2lvbkZvcm1hdC5wcm90b3R5cGUsICdwcmVjaXNpb24nLCB7CiAgICAgIHZhbHVlOiAwLAogICAgICB3cml0YWJsZTogZmFsc2UKICAgIH0pOwogIH0KfSkoKTsK"},{"name":"brave-video-bg-play.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLXZpZGVvLWJnLXBsYXkuanMKLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkKLy8gTGljZW5zZTogIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkvYmxvYi9tYXN0ZXIvTElDRU5TRSAoTUlUKQovLyBGcm9tOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nd2Fyc2VyLzNiNDdiNjE4NjNiZmZjZmViZTQ0OThjNzdiMjMwMWNkCihmdW5jdGlvbigpewpjb25zdCBJU19ZT1VUVUJFID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUuY29tLykgPiAtMSB8fAogICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUtbm9jb29raWUuY29tLykgPiAtMTsKY29uc3QgSVNfTU9CSUxFX1lPVVRVQkUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT0gJ20ueW91dHViZS5jb20nOwpjb25zdCBJU19ERVNLVE9QX1lPVVRVQkUgPSBJU19ZT1VUVUJFICYmICFJU19NT0JJTEVfWU9VVFVCRTsKY29uc3QgSVNfVklNRU8gPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc2VhcmNoKC8oPzpefC4rXC4pdmltZW8uY29tLykgPiAtMTsKY29uc3QgSVNfQU5EUk9JRCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSA+IC0xOwovLyBQYWdlIFZpc2liaWxpdHkgQVBJCmlmIChJU19BTkRST0lEIHx8ICFJU19ERVNLVE9QX1lPVVRVQkUpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkb2N1bWVudCwKICAgIHsgJ2hpZGRlbic6IHt2YWx1ZTogZmFsc2V9LCAndmlzaWJpbGl0eVN0YXRlJzoge3ZhbHVlOiAndmlzaWJsZSd9IH0pOwp9CndpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICd2aXNpYmlsaXR5Y2hhbmdlJywgZXZ0ID0+IGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwgdHJ1ZSk7Ci8vIEZ1bGxzY3JlZW4gQVBJCmlmIChJU19WSU1FTykgewogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICAgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBldnQgPT4gZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0cnVlKTsKfQovLyBVc2VyIGFjdGl2aXR5IHRyYWNraW5nCmlmIChJU19ZT1VUVUJFKSB7CiAgY29uc3QgcmVmcmVzaEludGVydmFsID0gNSAqIDYwICogMTAwMDsgLy8gZXZlcnkgNSBtaW51dGVzCiAgd2FpdEZvcllvdXR1YmVMYWN0SW5pdCgoKSA9PiByZWZyZXNoTGFjdCgpLCByZWZyZXNoSW50ZXJ2YWwpOwp9CmZ1bmN0aW9uIHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCwgYURlbGF5ID0gMTAwMCkgewogIGxldCBwYWdlV2luID0gd2luZG93OwogIGlmIChwYWdlV2luLmhhc093blByb3BlcnR5KCdfbGFjdCcpKSB7CiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCk7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ2FsbGJhY2tJbnRlcnZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYURlbGF5ICogMiksCiAgICAgICAgICAgICAgICAgICAgICBhRGVsYXkpOwogIH0KfQpmdW5jdGlvbiByZWZyZXNoTGFjdCgpIHsKICB3aW5kb3cuX2xhY3QgPSBEYXRlLm5vdygpOwp9Cn0pKCkK"},{"name":"brave-youtube-navigation-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KF8gPT4gewogIGNvbnN0IG9yaWdQZXJmTm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdzsKICBsZXQgcHJldmlvdXMgPSAwOwoKICB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID0gZnVuY3Rpb24gKCkgewogICAgbGV0IGN1cnJlbnQgPSBvcmlnUGVyZk5vdy5hcHBseSh0aGlzKTsKICAgIGlmIChjdXJyZW50IDw9IHByZXZpb3VzKSB7CiAgICAgIGN1cnJlbnQgPSBwcmV2aW91cyArIE51bWJlci5FUFNJTE9OICogMTAwMDAwOwogICAgfQoKICAgIHJldHVybiBwcmV2aW91cyA9IGN1cnJlbnQ7CiAgfQp9KSgpOwo="},{"name":"brave-youtube-theater-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGFzeW5jIF8gPT4gewogIGlmIChzZWxmLmNvb2tpZVN0b3JlID09PSB1bmRlZmluZWQpIHsKICAgIC8vIERvIG5vdGhpbmcgb24gaU9TLiBUaGUgcHJvYmxlbSBkb2Vzbid0IGV4aXN0IHRoZXJlLCBhbmQgdGhlCiAgICAvLyBzb2x1dGlvbiB3b3VsZG4ndCB3b3JrIGFueXdheQogICAgcmV0dXJuCiAgfQogIGNvbnN0IHN0b3JlS2V5ID0gJ2JyYXZlOjp3aWRlJwogIGNvbnN0IGNvb2tpZUtleSA9ICd3aWRlJwoKICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICBjb25zdCB3aWRlQ29va2llQmFja3VwID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmVLZXkpCgogIC8vIFNldCB0aGUgY29va2llIGZyb20gbG9jYWxTdG9yYWdlIGlmZjogCiAgLy8gMSkgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LgogIC8vIDIpIHdlIGhhdmUgYSBiYWNrdXAgaW4gbG9jYWxTdG9yYWdlLgogIGlmICghd2lkZUNvb2tpZSAmJiB3aWRlQ29va2llQmFja3VwKSB7CiAgICAvLyBUaGUgY29va2llIG9iamVjdCBpcyBzdG9yZWQgYXMgYSBzdHJpbmcuIFBhcnNlIGl0LgogICAgY29uc3QgY29va2llT2JqID0gSlNPTi5wYXJzZSh3aWRlQ29va2llQmFja3VwKQogICAgYXdhaXQgY29va2llU3RvcmUuc2V0KGNvb2tpZU9iaikKICAgIC8vIFJlZnJlc2ggdGhlIHBhZ2UgdG8gbWFrZSBZVCB1c2UgdGhlIG5ldyBjb29raWUuCiAgICBsb2NhdGlvbi5yZWxvYWQoKQogIH0KCiAgLy8gUGVyc2lzdCB0aGUgY29va2llIHZhbHVlIHRvIGxvY2FsU3RvcmFnZSBldmVyeSBzZWNvbmQuCiAgc2V0SW50ZXJ2YWwoYXN5bmMgXyA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICAgICAgLy8gV2UgaGF2ZSB0byBzdHJpbmdpZnkgdGhlIGNvb2tpZSBvYmplY3QgdG8gc3RvcmUgaXQgaW4gbG9jYWxTdG9yYWdlLgogICAgICBpZiAod2lkZUNvb2tpZSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JlS2V5LCBKU09OLnN0cmluZ2lmeSh3aWRlQ29va2llKSkKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yZUtleSkKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBzd2FsbG93IGVycm9yIGZyb20gbm8gY29va2llIGV4aXN0aW5nCiAgICB9CiAgfSwgMTAwMCkKfSkoKTsK"},{"name":"de-amp.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uICgpIHsKICBpZiAodHlwZW9mIGRlQW1wRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVBbXBFbmFibGVkKSB7CiAgICBjb25zdCBhdHRyID0gJ2pzYWN0aW9uJwogICAgY29uc3Qgc2VsZWN0b3IgPSBgYVtkYXRhLWFtcC10aXRsZV1bJHthdHRyfV1gCiAgICBsZXQgdGltZXIKICAgIGNvbnN0IGlkbGVDYWxsYmFjayA9IChfID0+IHsKICAgICAgaWYgKHNlbGYucmVxdWVzdElkbGVDYWxsYmFjaykgewogICAgICAgIHJldHVybiAoY2FsbGJhY2ssIHRpbWVvdXQpID0+IHsKICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2soY2FsbGJhY2ssIHsgdGltZW91dCB9KQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dCB3aGVuIHJlcXVlc3RJZGxlQ2FsbGJhY2sgZG9lc24ndCBleGlzdC4KICAgICAgcmV0dXJuIChjYWxsYmFjaykgPT4gewogICAgICAgIHJldHVybiBzZWxmLnNldFRpbWVvdXQoY2FsbGJhY2ssIDApCiAgICAgIH0KICAgIH0pKCkKICAgIGNvbnN0IHJtYXR0ciA9ICgpID0+IHsKICAgICAgdGltZXIgPSB1bmRlZmluZWQKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpCiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7CiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsgfQogICAgfQogICAgY29uc3QgbXV0YXRpb25IYW5kbGVyID0gKG11dGF0aW9ucykgPT4gewogICAgICBpZiAodGltZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGxldCBza2lwID0gdHJ1ZQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGggJiYgc2tpcDsgaSsrKSB7CiAgICAgICAgY29uc3QgeyB0eXBlLCBhZGRlZE5vZGVzLCByZW1vdmVkTm9kZXMgfSA9IG11dGF0aW9uc1tpXQogICAgICAgIGlmICh0eXBlID09PSAnYXR0cmlidXRlcycpIHsKICAgICAgICAgIHNraXAgPSBmYWxzZQogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFkZGVkTm9kZXMubGVuZ3RoICYmIHNraXA7IGorKykgewogICAgICAgICAgaWYgKGFkZGVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aCAmJiBza2lwOyBqKyspIHsKICAgICAgICAgIGlmIChyZW1vdmVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChza2lwKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHRpbWVyID0gaWRsZUNhbGxiYWNrKHJtYXR0ciwgMTcpCiAgICB9CgogICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7CiAgICAgIHJtYXR0cigpCiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25IYW5kbGVyKQogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7CiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFthdHRyXSwKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgICB9KQogICAgfQoKICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHN0YXJ0LCB7IG9uY2U6IHRydWUgfSkKICB9Cn0pKCk7Cg=="},{"name":"touch-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8gUmVtb3ZlIHRvdWNoIGNoZWNrcyBvbiBzZWxlY3RlZCBtb2JpbGUgc2l0ZXMKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVUb3VjaApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hzdGFydApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hlbmQKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5vbnRvdWNoY2FuY2VsCmRlbGV0ZSBEb2N1bWVudC5wcm90b3R5cGUuVG91Y2hFdmVudAo="},{"name":"trusted_types.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIHNldC10cnVzdGVkLXR5cGVzLmpzCmZ1bmN0aW9uIHNldFRydXN0ZWRUeXBlcygpIHsKICBpZiAod2luZG93LnRydXN0ZWRUeXBlcyAmJiB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSkgewogICAgd2luZG93LnRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3koImRlZmF1bHQiLCB7CiAgICAgIGNyZWF0ZVNjcmlwdDogc3RyaW5nID0+IHN0cmluZwogICAgfSk7CiAgIH0KICAgcnVuQXQoKCkgPT4ge30sICdpbnRlcmFjdGl2ZScpOwp9Cg=="},{"name":"vaft-ublock-origin.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"video-swap-new-ublock-origin.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-current-script.js","aliases":["acs.js","abort-current-inline-script.js","acis.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-property-read.js","aliases":["aopr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-property-write.js","aliases":["aopw.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gZ2V0UmFuZG9tVG9rZW4oKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIHJldHVybiBzYWZlLlN0cmluZ19mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICBzYWZlLk1hdGhfZmxvb3Ioc2FmZS5NYXRoX3JhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7Cn0KZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CmZ1bmN0aW9uIGdldEV4Y2VwdGlvblRva2VuKCkgewogICAgY29uc3QgdG9rZW4gPSBnZXRSYW5kb21Ub2tlbigpOwogICAgY29uc3Qgb2UgPSBzZWxmLm9uZXJyb3I7CiAgICBzZWxmLm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIC4uLmFyZ3MpIHsKICAgICAgICBpZiAoIHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnICYmIG1zZy5pbmNsdWRlcyh0b2tlbikgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgaWYgKCBvZSBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewogICAgICAgICAgICByZXR1cm4gb2UuY2FsbCh0aGlzLCBtc2csIC4uLmFyZ3MpOwogICAgICAgIH0KICAgIH0uYmluZCgpOwogICAgcmV0dXJuIHRva2VuOwp9CgogIChmdW5jdGlvbiBhYm9ydE9uUHJvcGVydHlXcml0ZSgKICAgIHByb3AgPSAnJwopIHsKICAgIGlmICggdHlwZW9mIHByb3AgIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGlmICggcHJvcCA9PT0gJycgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCBsb2dQcmVmaXggPSBzYWZlLm1ha2VMb2dQcmVmaXgoJ2Fib3J0LW9uLXByb3BlcnR5LXdyaXRlJywgcHJvcCk7CiAgICBjb25zdCBleGNlcHRpb25Ub2tlbiA9IGdldEV4Y2VwdGlvblRva2VuKCk7CiAgICBsZXQgb3duZXIgPSB3aW5kb3c7CiAgICBmb3IgKDs7KSB7CiAgICAgICAgY29uc3QgcG9zID0gcHJvcC5pbmRleE9mKCcuJyk7CiAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgeyBicmVhazsgfQogICAgICAgIG93bmVyID0gb3duZXJbcHJvcC5zbGljZSgwLCBwb3MpXTsKICAgICAgICBpZiAoIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgcHJvcCA9IHByb3Auc2xpY2UocG9zICsgMSk7CiAgICB9CiAgICBkZWxldGUgb3duZXJbcHJvcF07CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIHByb3AsIHsKICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzYWZlLnVib0xvZyhsb2dQcmVmaXgsICdBYm9ydGVkJyk7CiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihleGNlcHRpb25Ub2tlbik7CiAgICAgICAgfQogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"abort-on-stack-trace.js","aliases":["aost.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gZ2V0UmFuZG9tVG9rZW4oKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIHJldHVybiBzYWZlLlN0cmluZ19mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICBzYWZlLk1hdGhfZmxvb3Ioc2FmZS5NYXRoX3JhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7Cn0KZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CmZ1bmN0aW9uIG1hdGNoZXNTdGFja1RyYWNlKAogICAgbmVlZGxlRGV0YWlscywKICAgIGxvZ0xldmVsID0gJycKKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IGV4Y2VwdGlvblRva2VuID0gZ2V0RXhjZXB0aW9uVG9rZW4oKTsKICAgIGNvbnN0IGVycm9yID0gbmV3IHNhZmUuRXJyb3IoZXhjZXB0aW9uVG9rZW4pOwogICAgY29uc3QgZG9jVVJMID0gbmV3IFVSTChzZWxmLmxvY2F0aW9uLmhyZWYpOwogICAgZG9jVVJMLmhhc2ggPSAnJzsKICAgIC8vIE5vcm1hbGl6ZSBzdGFjayB0cmFjZQogICAgY29uc3QgcmVMaW5lID0gLyguKj9AKT8oXFMrKSg6XGQrKTpcZCtcKT8kLzsKICAgIGNvbnN0IGxpbmVzID0gW107CiAgICBmb3IgKCBsZXQgbGluZSBvZiBlcnJvci5zdGFjay5zcGxpdCgvW1xuXHJdKy8pICkgewogICAgICAgIGlmICggbGluZS5pbmNsdWRlcyhleGNlcHRpb25Ub2tlbikgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgbGluZSA9IGxpbmUudHJpbSgpOwogICAgICAgIGNvbnN0IG1hdGNoID0gc2FmZS5SZWdFeHBfZXhlYy5jYWxsKHJlTGluZSwgbGluZSk7CiAgICAgICAgaWYgKCBtYXRjaCA9PT0gbnVsbCApIHsgY29udGludWU7IH0KICAgICAgICBsZXQgdXJsID0gbWF0Y2hbMl07CiAgICAgICAgaWYgKCB1cmwuc3RhcnRzV2l0aCgnKCcpICkgeyB1cmwgPSB1cmwuc2xpY2UoMSk7IH0KICAgICAgICBpZiAoIHVybCA9PT0gZG9jVVJMLmhyZWYgKSB7CiAgICAgICAgICAgIHVybCA9ICdpbmxpbmVTY3JpcHQnOwogICAgICAgIH0gZWxzZSBpZiAoIHVybC5zdGFydHNXaXRoKCc8YW5vbnltb3VzPicpICkgewogICAgICAgICAgICB1cmwgPSAnaW5qZWN0ZWRTY3JpcHQnOwogICAgICAgIH0KICAgICAgICBsZXQgZm4gPSBtYXRjaFsxXSAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgID8gbWF0Y2hbMV0uc2xpY2UoMCwgLTEpCiAgICAgICAgICAgIDogbGluZS5zbGljZSgwLCBtYXRjaC5pbmRleCkudHJpbSgpOwogICAgICAgIGlmICggZm4uc3RhcnRzV2l0aCgnYXQnKSApIHsgZm4gPSBmbi5zbGljZSgyKS50cmltKCk7IH0KICAgICAgICBsZXQgcm93Y29sID0gbWF0Y2hbM107CiAgICAgICAgbGluZXMucHVzaCgnICcgKyBgJHtmbn0gJHt1cmx9JHtyb3djb2x9OjFgLnRyaW0oKSk7CiAgICB9CiAgICBsaW5lc1swXSA9IGBzdGFja0RlcHRoOiR7bGluZXMubGVuZ3RoLTF9YDsKICAgIGNvbnN0IHN0YWNrID0gbGluZXMuam9pbignXHQnKTsKICAgIGNvbnN0IHIgPSBuZWVkbGVEZXRhaWxzLm1hdGNoQWxsICE9PSB0cnVlICYmCiAgICAgICAgc2FmZS50ZXN0UGF0dGVybihuZWVkbGVEZXRhaWxzLCBzdGFjayk7CiAgICBpZiAoCiAgICAgICAgbG9nTGV2ZWwgPT09ICdhbGwnIHx8CiAgICAgICAgbG9nTGV2ZWwgPT09ICdtYXRjaCcgJiYgciB8fAogICAgICAgIGxvZ0xldmVsID09PSAnbm9tYXRjaCcgJiYgIXIKICAgICkgewogICAgICAgIHNhZmUudWJvTG9nKHN0YWNrLnJlcGxhY2UoL1x0L2csICdcbicpKTsKICAgIH0KICAgIHJldHVybiByOwp9CmZ1bmN0aW9uIGdldEV4Y2VwdGlvblRva2VuKCkgewogICAgY29uc3QgdG9rZW4gPSBnZXRSYW5kb21Ub2tlbigpOwogICAgY29uc3Qgb2UgPSBzZWxmLm9uZXJyb3I7CiAgICBzZWxmLm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIC4uLmFyZ3MpIHsKICAgICAgICBpZiAoIHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnICYmIG1zZy5pbmNsdWRlcyh0b2tlbikgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgaWYgKCBvZSBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewogICAgICAgICAgICByZXR1cm4gb2UuY2FsbCh0aGlzLCBtc2csIC4uLmFyZ3MpOwogICAgICAgIH0KICAgIH0uYmluZCgpOwogICAgcmV0dXJuIHRva2VuOwp9CgogIChmdW5jdGlvbiBhYm9ydE9uU3RhY2tUcmFjZSgKICAgIGNoYWluID0gJycsCiAgICBuZWVkbGUgPSAnJwopIHsKICAgIGlmICggdHlwZW9mIGNoYWluICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IG5lZWRsZURldGFpbHMgPSBzYWZlLmluaXRQYXR0ZXJuKG5lZWRsZSwgeyBjYW5OZWdhdGU6IHRydWUgfSk7CiAgICBjb25zdCBleHRyYUFyZ3MgPSBzYWZlLmdldEV4dHJhQXJncyhBcnJheS5mcm9tKGFyZ3VtZW50cyksIDIpOwogICAgaWYgKCBuZWVkbGUgPT09ICcnICkgeyBleHRyYUFyZ3MubG9nID0gJ2FsbCc7IH0KICAgIGNvbnN0IG1ha2VQcm94eSA9IGZ1bmN0aW9uKG93bmVyLCBjaGFpbikgewogICAgICAgIGNvbnN0IHBvcyA9IGNoYWluLmluZGV4T2YoJy4nKTsKICAgICAgICBpZiAoIHBvcyA9PT0gLTEgKSB7CiAgICAgICAgICAgIGxldCB2ID0gb3duZXJbY2hhaW5dOwogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIGNoYWluLCB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmICggbWF0Y2hlc1N0YWNrVHJhY2UobmVlZGxlRGV0YWlscywgZXh0cmFBcmdzLmxvZykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihnZXRFeGNlcHRpb25Ub2tlbigpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHY7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaGVzU3RhY2tUcmFjZShuZWVkbGVEZXRhaWxzLCBleHRyYUFyZ3MubG9nKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKGdldEV4Y2VwdGlvblRva2VuKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2ID0gYTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByb3AgPSBjaGFpbi5zbGljZSgwLCBwb3MpOwogICAgICAgIGxldCB2ID0gb3duZXJbcHJvcF07CiAgICAgICAgY2hhaW4gPSBjaGFpbi5zbGljZShwb3MgKyAxKTsKICAgICAgICBpZiAoIHYgKSB7CiAgICAgICAgICAgIG1ha2VQcm94eSh2LCBjaGFpbik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3duZXIsIHByb3ApOwogICAgICAgIGlmICggZGVzYyAmJiBkZXNjLnNldCAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIHByb3AsIHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHY7IH0sCiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSkgewogICAgICAgICAgICAgICAgdiA9IGE7CiAgICAgICAgICAgICAgICBpZiAoIGEgaW5zdGFuY2VvZiBPYmplY3QgKSB7CiAgICAgICAgICAgICAgICAgICAgbWFrZVByb3h5KGEsIGNoYWluKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IG93bmVyID0gd2luZG93OwogICAgbWFrZVByb3h5KG93bmVyLCBjaGFpbik7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"addEventListener-defuser.js","aliases":["aeld.js","prevent-addEventListener.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-fetch-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"evaldata-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"adjust-setInterval.js","aliases":["nano-setInterval-booster.js","nano-sib.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"adjust-setTimeout.js","aliases":["nano-setTimeout-booster.js","nano-stb.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"noeval-if.js","aliases":["prevent-eval-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-fetch.js","aliases":["no-fetch-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-refresh.js","aliases":["refresh-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-attr.js","aliases":["ra.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-class.js","aliases":["rc.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-requestAnimationFrame-if.js","aliases":["norafif.js","prevent-requestAnimationFrame.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-constant.js","aliases":["set.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-setInterval-if.js","aliases":["nosiif.js","prevent-setInterval.js","setInterval-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-setTimeout-if.js","aliases":["nostif.js","prevent-setTimeout.js","setTimeout-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"webrtc-if.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-xhr-if.js","aliases":["prevent-xhr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-window-open-if.js","aliases":["nowoif.js","prevent-window-open.js","window.open-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"close-window.js","aliases":["window-close-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"window.name-defuser.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIHdpbmRvd05hbWVEZWZ1c2VyKCkgewogICAgaWYgKCB3aW5kb3cgPT09IHdpbmRvdy50b3AgKSB7CiAgICAgICAgd2luZG93Lm5hbWUgPSAnJzsKICAgIH0KfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"overlay-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG92ZXJsYXlCdXN0ZXIoKSB7CiAgICBpZiAoIHdpbmRvdyAhPT0gd2luZG93LnRvcCApIHsgcmV0dXJuOyB9CiAgICB2YXIgdHN0YXJ0OwogICAgdmFyIHR0bCA9IDMwMDAwOwogICAgdmFyIGRlbGF5ID0gMDsKICAgIHZhciBkZWxheVN0ZXAgPSA1MDsKICAgIHZhciBidXN0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgICAgIGJvZHlFbCA9IGRvY3VtZW50LmJvZHksCiAgICAgICAgICAgIHZ3ID0gTWF0aC5taW4oZG9jRWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoKSwKICAgICAgICAgICAgdmggPSBNYXRoLm1pbihkb2NFbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCksCiAgICAgICAgICAgIHRvbCA9IE1hdGgubWluKHZ3LCB2aCkgKiAwLjA1LAogICAgICAgICAgICBlbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodncvMiwgdmgvMiksCiAgICAgICAgICAgIHN0eWxlLCByZWN0OwogICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgaWYgKCBlbCA9PT0gbnVsbCB8fCBlbC5wYXJlbnROb2RlID09PSBudWxsIHx8IGVsID09PSBib2R5RWwgKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTsKICAgICAgICAgICAgaWYgKCBwYXJzZUludChzdHlsZS56SW5kZXgsIDEwKSA+PSAxMDAwIHx8IHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICkgewogICAgICAgICAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICAgICAgaWYgKCByZWN0LmxlZnQgPD0gdG9sICYmIHJlY3QudG9wIDw9IHRvbCAmJiAodncgLSByZWN0LnJpZ2h0KSA8PSB0b2wgJiYgKHZoIC0gcmVjdC5ib3R0b20pIDwgdG9sICkgewogICAgICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICAgICAgICAgIHRzdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHZ3LzIsIHZoLzIpOwogICAgICAgICAgICAgICAgICAgIGJvZHlFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBkb2NFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7CiAgICAgICAgfQogICAgICAgIGlmICggKERhdGUubm93KCkgLSB0c3RhcnQpIDwgdHRsICkgewogICAgICAgICAgICBkZWxheSA9IE1hdGgubWluKGRlbGF5ICsgZGVsYXlTdGVwLCAxMDAwKTsKICAgICAgICAgICAgc2V0VGltZW91dChidXN0ZXIsIGRlbGF5KTsKICAgICAgICB9CiAgICB9OwogICAgdmFyIGRvbVJlYWR5ID0gZnVuY3Rpb24oZXYpIHsKICAgICAgICBpZiAoIGV2ICkgewogICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LnR5cGUsIGRvbVJlYWR5KTsKICAgICAgICB9CiAgICAgICAgdHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICBzZXRUaW1lb3V0KGJ1c3RlciwgZGVsYXkpOwogICAgfTsKICAgIGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnICkgewogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkb21SZWFkeSk7CiAgICB9IGVsc2UgewogICAgICAgIGRvbVJlYWR5KCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"alert-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGFsZXJ0QnVzdGVyKCkgewogICAgd2luZG93LmFsZXJ0ID0gbmV3IFByb3h5KHdpbmRvdy5hbGVydCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhhKTsKICAgICAgICB9LAogICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgICAgICAgIGlmICggcHJvcCA9PT0gJ3RvU3RyaW5nJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQudG9TdHJpbmcuYmluZCh0YXJnZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"nowebrtc.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG5vV2VicnRjKCkgewogICAgdmFyIHJ0Y05hbWUgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPyAnUlRDUGVlckNvbm5lY3Rpb24nIDogKAogICAgICAgIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbiA/ICd3ZWJraXRSVENQZWVyQ29ubmVjdGlvbicgOiAnJwogICAgKTsKICAgIGlmICggcnRjTmFtZSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgdmFyIGxvZyA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CiAgICB2YXIgcGMgPSBmdW5jdGlvbihjZmcpIHsKICAgICAgICBsb2coJ0RvY3VtZW50IHRyaWVkIHRvIGNyZWF0ZSBhbiBSVENQZWVyQ29ubmVjdGlvbjogJW8nLCBjZmcpOwogICAgfTsKICAgIGNvbnN0IG5vb3AgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwYy5wcm90b3R5cGUgPSB7CiAgICAgICAgY2xvc2U6IG5vb3AsCiAgICAgICAgY3JlYXRlRGF0YUNoYW5uZWw6IG5vb3AsCiAgICAgICAgY3JlYXRlT2ZmZXI6IG5vb3AsCiAgICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb246IG5vb3AsCiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gJ1tvYmplY3QgUlRDUGVlckNvbm5lY3Rpb25dJzsKICAgICAgICB9CiAgICB9OwogICAgdmFyIHogPSB3aW5kb3dbcnRjTmFtZV07CiAgICB3aW5kb3dbcnRjTmFtZV0gPSBwYy5iaW5kKHdpbmRvdyk7CiAgICBpZiAoIHoucHJvdG90eXBlICkgewogICAgICAgIHoucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uKCkge30KICAgICAgICAgICAgfTsKICAgICAgICB9LmJpbmQobnVsbCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"disable-newtab-links.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGRpc2FibGVOZXd0YWJMaW5rcygpIHsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0OwogICAgICAgIHdoaWxlICggdGFyZ2V0ICE9PSBudWxsICkgewogICAgICAgICAgICBpZiAoIHRhcmdldC5sb2NhbE5hbWUgPT09ICdhJyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSApIHsKICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"remove-cookie.js","aliases":["cookie-remover.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"xml-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"m3u-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CgogIChmdW5jdGlvbiBtM3VQcnVuZSgKICAgIG0zdVBhdHRlcm4gPSAnJywKICAgIHVybFBhdHRlcm4gPSAnJwopIHsKICAgIGlmICggdHlwZW9mIG0zdVBhdHRlcm4gIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgbG9nUHJlZml4ID0gc2FmZS5tYWtlTG9nUHJlZml4KCdtM3UtcHJ1bmUnLCBtM3VQYXR0ZXJuLCB1cmxQYXR0ZXJuKTsKICAgIGNvbnN0IHRvTG9nID0gW107CiAgICBjb25zdCByZWdleEZyb21BcmcgPSBhcmcgPT4gewogICAgICAgIGlmICggYXJnID09PSAnJyApIHsgcmV0dXJuIC9eLzsgfQogICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ21zXSopJC8uZXhlYyhhcmcpOwogICAgICAgIGlmICggbWF0Y2ggIT09IG51bGwgKSB7CiAgICAgICAgICAgIGxldCBmbGFncyA9IG1hdGNoWzJdIHx8ICcnOwogICAgICAgICAgICBpZiAoIGZsYWdzLmluY2x1ZGVzKCdtJykgKSB7IGZsYWdzICs9ICdzJzsgfQogICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChtYXRjaFsxXSwgZmxhZ3MpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgKICAgICAgICAgICAgYXJnLnJlcGxhY2UoL1suKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJykucmVwbGFjZSgvXCorL2csICcuKj8nKQogICAgICAgICk7CiAgICB9OwogICAgY29uc3QgcmVNM3UgPSByZWdleEZyb21BcmcobTN1UGF0dGVybik7CiAgICBjb25zdCByZVVybCA9IHJlZ2V4RnJvbUFyZyh1cmxQYXR0ZXJuKTsKICAgIGNvbnN0IHBydW5lU3BsaWNlb3V0QmxvY2sgPSAobGluZXMsIGkpID0+IHsKICAgICAgICBpZiAoIGxpbmVzW2ldLnN0YXJ0c1dpdGgoJyNFWFQtWC1DVUU6VFlQRT0iU3BsaWNlT3V0IicpID09PSBmYWxzZSApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB0b0xvZy5wdXNoKGBcdCR7bGluZXNbaV19YCk7CiAgICAgICAgbGluZXNbaV0gPSB1bmRlZmluZWQ7IGkgKz0gMTsKICAgICAgICBpZiAoIGxpbmVzW2ldLnN0YXJ0c1dpdGgoJyNFWFQtWC1BU1NFVDpDQUlEJykgKSB7CiAgICAgICAgICAgIHRvTG9nLnB1c2goYFx0JHtsaW5lc1tpXX1gKTsKICAgICAgICAgICAgbGluZXNbaV0gPSB1bmRlZmluZWQ7IGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhULVgtU0NURTM1OicpICkgewogICAgICAgICAgICB0b0xvZy5wdXNoKGBcdCR7bGluZXNbaV19YCk7CiAgICAgICAgICAgIGxpbmVzW2ldID0gdW5kZWZpbmVkOyBpICs9IDE7CiAgICAgICAgfQogICAgICAgIGlmICggbGluZXNbaV0uc3RhcnRzV2l0aCgnI0VYVC1YLUNVRS1JTicpICkgewogICAgICAgICAgICB0b0xvZy5wdXNoKGBcdCR7bGluZXNbaV19YCk7CiAgICAgICAgICAgIGxpbmVzW2ldID0gdW5kZWZpbmVkOyBpICs9IDE7CiAgICAgICAgfQogICAgICAgIGlmICggbGluZXNbaV0uc3RhcnRzV2l0aCgnI0VYVC1YLVNDVEUzNTonKSApIHsKICAgICAgICAgICAgdG9Mb2cucHVzaChgXHQke2xpbmVzW2ldfWApOwogICAgICAgICAgICBsaW5lc1tpXSA9IHVuZGVmaW5lZDsgaSArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICBjb25zdCBwcnVuZUluZkJsb2NrID0gKGxpbmVzLCBpKSA9PiB7CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhUSU5GJykgPT09IGZhbHNlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICBpZiAoIHJlTTN1LnRlc3QobGluZXNbaSsxXSkgPT09IGZhbHNlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICB0b0xvZy5wdXNoKCdEaXNjYXJkaW5nJywgYFx0JHtsaW5lc1tpXX0sIFx0JHtsaW5lc1tpKzFdfWApOwogICAgICAgIGxpbmVzW2ldID0gbGluZXNbaSsxXSA9IHVuZGVmaW5lZDsgaSArPSAyOwogICAgICAgIGlmICggbGluZXNbaV0uc3RhcnRzV2l0aCgnI0VYVC1YLURJU0NPTlRJTlVJVFknKSApIHsKICAgICAgICAgICAgdG9Mb2cucHVzaChgXHQke2xpbmVzW2ldfWApOwogICAgICAgICAgICBsaW5lc1tpXSA9IHVuZGVmaW5lZDsgaSArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICBjb25zdCBwcnVuZXIgPSB0ZXh0ID0+IHsKICAgICAgICBpZiAoICgvXlxzKiNFWFRNM1UvLnRlc3QodGV4dCkpID09PSBmYWxzZSApIHsgcmV0dXJuIHRleHQ7IH0KICAgICAgICBpZiAoIG0zdVBhdHRlcm4gPT09ICcnICkgewogICAgICAgICAgICBzYWZlLnVib0xvZyhgIENvbnRlbnQ6XG4ke3RleHR9YCk7CiAgICAgICAgICAgIHJldHVybiB0ZXh0OwogICAgICAgIH0KICAgICAgICBpZiAoIHJlTTN1Lm11bHRpbGluZSApIHsKICAgICAgICAgICAgcmVNM3UubGFzdEluZGV4ID0gMDsKICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSByZU0zdS5leGVjKHRleHQpOwogICAgICAgICAgICAgICAgaWYgKCBtYXRjaCA9PT0gbnVsbCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgICAgIGxldCBkaXNjYXJkID0gbWF0Y2hbMF07CiAgICAgICAgICAgICAgICBsZXQgYmVmb3JlID0gdGV4dC5zbGljZSgwLCBtYXRjaC5pbmRleCk7CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgL15bXG5ccl0rLy50ZXN0KGRpc2NhcmQpID09PSBmYWxzZSAmJgogICAgICAgICAgICAgICAgICAgIC9bXG5ccl0rJC8udGVzdChiZWZvcmUpID09PSBmYWxzZQogICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRPZkxpbmUgPSAvW15cblxyXSskLy5leGVjKGJlZm9yZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdGFydE9mTGluZSAhPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlID0gYmVmb3JlLnNsaWNlKDAsIHN0YXJ0T2ZMaW5lLmluZGV4KTsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2FyZCA9IHN0YXJ0T2ZMaW5lWzBdICsgZGlzY2FyZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgYWZ0ZXIgPSB0ZXh0LnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTsKICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAvW1xuXHJdKyQvLnRlc3QoZGlzY2FyZCkgPT09IGZhbHNlICYmCiAgICAgICAgICAgICAgICAgICAgL15bXG5ccl0rLy50ZXN0KGFmdGVyKSA9PT0gZmFsc2UKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZE9mTGluZSA9IC9eW15cblxyXSsvLmV4ZWMoYWZ0ZXIpOwogICAgICAgICAgICAgICAgICAgIGlmICggZW5kT2ZMaW5lICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgICAgICAgICBhZnRlciA9IGFmdGVyLnNsaWNlKGVuZE9mTGluZS5pbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NhcmQgKz0gZGlzY2FyZCArIGVuZE9mTGluZVswXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0ZXh0ID0gYmVmb3JlLnRyaW0oKSArICdcbicgKyBhZnRlci50cmltKCk7CiAgICAgICAgICAgICAgICByZU0zdS5sYXN0SW5kZXggPSBiZWZvcmUubGVuZ3RoICsgMTsKICAgICAgICAgICAgICAgIHRvTG9nLnB1c2goJ0Rpc2NhcmRpbmcnLCAuLi5kaXNjYXJkLnNwbGl0KC9cbisvKS5tYXAocyA9PiBgXHQke3N9YCkpOwogICAgICAgICAgICAgICAgaWYgKCByZU0zdS5nbG9iYWwgPT09IGZhbHNlICkgeyBicmVhazsgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0ZXh0OwogICAgICAgIH0KICAgICAgICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoL1xuXHJ8XG58XHIvKTsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgaWYgKCBsaW5lc1tpXSA9PT0gdW5kZWZpbmVkICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBpZiAoIHBydW5lU3BsaWNlb3V0QmxvY2sobGluZXMsIGkpICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBpZiAoIHBydW5lSW5mQmxvY2sobGluZXMsIGkpICkgeyBjb250aW51ZTsgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbGluZXMuZmlsdGVyKGwgPT4gbCAhPT0gdW5kZWZpbmVkKS5qb2luKCdcbicpOwogICAgfTsKICAgIGNvbnN0IHVybEZyb21BcmcgPSBhcmcgPT4gewogICAgICAgIGlmICggdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgKSB7IHJldHVybiBhcmc7IH0KICAgICAgICBpZiAoIGFyZyBpbnN0YW5jZW9mIFJlcXVlc3QgKSB7IHJldHVybiBhcmcudXJsOyB9CiAgICAgICAgcmV0dXJuIFN0cmluZyhhcmcpOwogICAgfTsKICAgIGNvbnN0IHJlYWxGZXRjaCA9IHNlbGYuZmV0Y2g7CiAgICBzZWxmLmZldGNoID0gbmV3IFByb3h5KHNlbGYuZmV0Y2gsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIGlmICggcmVVcmwudGVzdCh1cmxGcm9tQXJnKGFyZ3NbMF0pKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZWFsRmV0Y2goLi4uYXJncykudGhlbihyZWFsUmVzcG9uc2UgPT4KICAgICAgICAgICAgICAgIHJlYWxSZXNwb25zZS50ZXh0KCkudGhlbih0ZXh0ID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBSZXNwb25zZShwcnVuZXIodGV4dCksIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZWFsUmVzcG9uc2Uuc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZWFsUmVzcG9uc2Uuc3RhdHVzVGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVhbFJlc3BvbnNlLmhlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0b0xvZy5sZW5ndGggIT09IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvTG9nLnVuc2hpZnQobG9nUHJlZml4KTsKICAgICAgICAgICAgICAgICAgICAgICAgc2FmZS51Ym9Mb2codG9Mb2cuam9pbignXG4nKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfSk7CiAgICBzZWxmLlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuID0gbmV3IFByb3h5KHNlbGYuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4sIHsKICAgICAgICBhcHBseTogYXN5bmMgKHRhcmdldCwgdGhpc0FyZywgYXJncykgPT4gewogICAgICAgICAgICBpZiAoIHJlVXJsLnRlc3QodXJsRnJvbUFyZyhhcmdzWzFdKSkgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzQXJnLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICggdGhpc0FyZy5yZWFkeVN0YXRlICE9PSA0ICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzQXJnLnJlc3BvbnNlVHlwZTsKICAgICAgICAgICAgICAgIGlmICggdHlwZSAhPT0gJycgJiYgdHlwZSAhPT0gJ3RleHQnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIGNvbnN0IHRleHRpbiA9IHRoaXNBcmcucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgY29uc3QgdGV4dG91dCA9IHBydW5lcih0ZXh0aW4pOwogICAgICAgICAgICAgICAgaWYgKCB0ZXh0b3V0ID09PSB0ZXh0aW4gKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXNBcmcsICdyZXNwb25zZScsIHsgdmFsdWU6IHRleHRvdXQgfSk7CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpc0FyZywgJ3Jlc3BvbnNlVGV4dCcsIHsgdmFsdWU6IHRleHRvdXQgfSk7CiAgICAgICAgICAgICAgICBpZiAoIHRvTG9nLmxlbmd0aCAhPT0gMCApIHsKICAgICAgICAgICAgICAgICAgICB0b0xvZy51bnNoaWZ0KGxvZ1ByZWZpeCk7CiAgICAgICAgICAgICAgICAgICAgc2FmZS51Ym9Mb2codG9Mb2cuam9pbignXG4nKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"href-sanitizer.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"call-nothrow.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGNhbGxOb3Rocm93KAogICAgY2hhaW4gPSAnJwopIHsKICAgIGlmICggdHlwZW9mIGNoYWluICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBpZiAoIGNoYWluID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBwYXJ0cyA9IGNoYWluLnNwbGl0KCcuJyk7CiAgICBsZXQgb3duZXIgPSB3aW5kb3csIHByb3A7CiAgICBmb3IgKDs7KSB7CiAgICAgICAgcHJvcCA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgaWYgKCBwYXJ0cy5sZW5ndGggPT09IDAgKSB7IGJyZWFrOyB9CiAgICAgICAgb3duZXIgPSBvd25lcltwcm9wXTsKICAgICAgICBpZiAoIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICB9CiAgICBpZiAoIHByb3AgPT09ICcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IGZuID0gb3duZXJbcHJvcF07CiAgICBpZiAoIHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJyApIHsgcmV0dXJuOyB9CiAgICBvd25lcltwcm9wXSA9IG5ldyBQcm94eShmbiwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICAgICAgICAgIGxldCByOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgciA9IFJlZmxlY3QuYXBwbHkoLi4uYXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"spoof-css.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CgogIChmdW5jdGlvbiBzcG9vZkNTUygKICAgIHNlbGVjdG9yLAogICAgLi4uYXJncwopIHsKICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBpZiAoIHNlbGVjdG9yID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCB0b0NhbWVsQ2FzZSA9IHMgPT4gcy5yZXBsYWNlKC8tW2Etel0vZywgcyA9PiBzLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpKTsKICAgIGNvbnN0IHByb3BUb1ZhbHVlTWFwID0gbmV3IE1hcCgpOwogICAgZm9yICggbGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMiApIHsKICAgICAgICBpZiAoIHR5cGVvZiBhcmdzW2krMF0gIT09ICdzdHJpbmcnICkgeyBicmVhazsgfQogICAgICAgIGlmICggYXJnc1tpKzBdID09PSAnJyApIHsgYnJlYWs7IH0KICAgICAgICBpZiAoIHR5cGVvZiBhcmdzW2krMV0gIT09ICdzdHJpbmcnICkgeyBicmVhazsgfQogICAgICAgIHByb3BUb1ZhbHVlTWFwLnNldCh0b0NhbWVsQ2FzZShhcmdzW2krMF0pLCBhcmdzW2krMV0pOwogICAgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCBsb2dQcmVmaXggPSBzYWZlLm1ha2VMb2dQcmVmaXgoJ3Nwb29mLWNzcycsIHNlbGVjdG9yLCAuLi5hcmdzKTsKICAgIGNvbnN0IGNhbkRlYnVnID0gc2NyaXB0bGV0R2xvYmFscy5jYW5EZWJ1ZzsKICAgIGNvbnN0IHNob3VsZERlYnVnID0gY2FuRGVidWcgJiYgcHJvcFRvVmFsdWVNYXAuZ2V0KCdkZWJ1ZycpIHx8IDA7CiAgICBjb25zdCBpbnN0YW5jZVByb3BlcnRpZXMgPSBbICdjc3NUZXh0JywgJ2xlbmd0aCcsICdwYXJlbnRSdWxlJyBdOwogICAgY29uc3Qgc3Bvb2ZTdHlsZSA9IChwcm9wLCByZWFsKSA9PiB7CiAgICAgICAgY29uc3Qgbm9ybWFsUHJvcCA9IHRvQ2FtZWxDYXNlKHByb3ApOwogICAgICAgIGNvbnN0IHNob3VsZFNwb29mID0gcHJvcFRvVmFsdWVNYXAuaGFzKG5vcm1hbFByb3ApOwogICAgICAgIGNvbnN0IHZhbHVlID0gc2hvdWxkU3Bvb2YgPyBwcm9wVG9WYWx1ZU1hcC5nZXQobm9ybWFsUHJvcCkgOiByZWFsOwogICAgICAgIGlmICggc2hvdWxkU3Bvb2YgKSB7CiAgICAgICAgICAgIHNhZmUudWJvTG9nKGxvZ1ByZWZpeCwgYFNwb29maW5nICR7cHJvcH0gdG8gJHt2YWx1ZX1gKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfTsKICAgIGNvbnN0IGNsb2Fja0Z1bmMgPSAoZm4sIHRoaXNBcmcsIG5hbWUpID0+IHsKICAgICAgICBjb25zdCB0cmFwID0gZm4uYmluZCh0aGlzQXJnKTsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHJhcCwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lIH0pOwogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0cmFwLCAndG9TdHJpbmcnLCB7CiAgICAgICAgICAgIHZhbHVlOiAoICkgPT4gYGZ1bmN0aW9uICR7bmFtZX0oKSB7IFtuYXRpdmUgY29kZV0gfWAKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdHJhcDsKICAgIH07CiAgICBzZWxmLmdldENvbXB1dGVkU3R5bGUgPSBuZXcgUHJveHkoc2VsZi5nZXRDb21wdXRlZFN0eWxlLCB7CiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIKICAgICAgICAgICAgaWYgKCBzaG91bGREZWJ1ZyAhPT0gMCApIHsgZGVidWdnZXI7IH0KICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnRzID0gbmV3IFdlYWtTZXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpOwogICAgICAgICAgICBpZiAoIHRhcmdldEVsZW1lbnRzLmhhcyhhcmdzWzBdKSA9PT0gZmFsc2UgKSB7IHJldHVybiBzdHlsZTsgfQogICAgICAgICAgICBjb25zdCBwcm94aWVkU3R5bGUgPSBuZXcgUHJveHkoc3R5bGUsIHsKICAgICAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgdGFyZ2V0W3Byb3BdID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByb3AgPT09ICdnZXRQcm9wZXJ0eVZhbHVlJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9hY2tGdW5jKGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzcG9vZlN0eWxlKHByb3AsIHRhcmdldFtwcm9wXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0YXJnZXQsICdnZXRQcm9wZXJ0eVZhbHVlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb2Fja0Z1bmModGFyZ2V0W3Byb3BdLCB0YXJnZXQsIHByb3ApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIGluc3RhbmNlUHJvcGVydGllcy5pbmNsdWRlcyhwcm9wKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzcG9vZlN0eWxlKHByb3AsIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wVG9WYWx1ZU1hcC5oYXMocHJvcCkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb3BUb1ZhbHVlTWFwLmdldChwcm9wKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gcHJveGllZFN0eWxlOwogICAgICAgIH0sCiAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHsKICAgICAgICAgICAgaWYgKCBwcm9wID09PSAndG9TdHJpbmcnICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC50b1N0cmluZy5iaW5kKHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpOwogICAgICAgIH0sCiAgICB9KTsKICAgIEVsZW1lbnQucHJvdG90eXBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9IG5ldyBQcm94eShFbGVtZW50LnByb3RvdHlwZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcgogICAgICAgICAgICBpZiAoIHNob3VsZERlYnVnICE9PSAwICkgeyBkZWJ1Z2dlcjsgfQogICAgICAgICAgICBjb25zdCByZWN0ID0gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50cyA9IG5ldyBXZWFrU2V0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTsKICAgICAgICAgICAgaWYgKCB0YXJnZXRFbGVtZW50cy5oYXModGhpc0FyZykgPT09IGZhbHNlICkgeyByZXR1cm4gcmVjdDsgfQogICAgICAgICAgICBsZXQgeyBoZWlnaHQsIHdpZHRoIH0gPSByZWN0OwogICAgICAgICAgICBpZiAoIHByb3BUb1ZhbHVlTWFwLmhhcygnd2lkdGgnKSApIHsKICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VGbG9hdChwcm9wVG9WYWx1ZU1hcC5nZXQoJ3dpZHRoJykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggcHJvcFRvVmFsdWVNYXAuaGFzKCdoZWlnaHQnKSApIHsKICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlRmxvYXQocHJvcFRvVmFsdWVNYXAuZ2V0KCdoZWlnaHQnKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5ldyBzZWxmLkRPTVJlY3QocmVjdC54LCByZWN0LnksIHdpZHRoLCBoZWlnaHQpOwogICAgICAgIH0sCiAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHsKICAgICAgICAgICAgaWYgKCBwcm9wID09PSAndG9TdHJpbmcnICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC50b1N0cmluZy5iaW5kKHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpOwogICAgICAgIH0sCiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"remove-node-text.js","aliases":["rmnt.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gZ2V0Q29va2llRm4oCiAgICBuYW1lID0gJycKKSB7CiAgICBmb3IgKCBjb25zdCBzIG9mIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgvXHMqO1xzKi8pICkgewogICAgICAgIGNvbnN0IHBvcyA9IHMuaW5kZXhPZignPScpOwogICAgICAgIGlmICggcG9zID09PSAtMSApIHsgY29udGludWU7IH0KICAgICAgICBpZiAoIHMuc2xpY2UoMCwgcG9zKSAhPT0gbmFtZSApIHsgY29udGludWU7IH0KICAgICAgICByZXR1cm4gcy5zbGljZShwb3MrMSkudHJpbSgpOwogICAgfQp9CmZ1bmN0aW9uIHNldENvb2tpZUZuKAogICAgdHJ1c3RlZCA9IGZhbHNlLAogICAgbmFtZSA9ICcnLAogICAgdmFsdWUgPSAnJywKICAgIGV4cGlyZXMgPSAnJywKICAgIHBhdGggPSAnJywKICAgIG9wdGlvbnMgPSB7fSwKKSB7CiAgICAvLyBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzI2MTYjc2VjdGlvbi0yLjIKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91QmxvY2tPcmlnaW4vdUJsb2NrLWlzc3Vlcy9pc3N1ZXMvMjc3NwogICAgaWYgKCB0cnVzdGVkID09PSBmYWxzZSAmJiAvW14hIyQlJicqK1wtLjAtOUEtWltcXV5fYGEtenx+XS8udGVzdChuYW1lKSApIHsKICAgICAgICBuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpOwogICAgfQogICAgLy8gaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM2MjY1I3NlY3Rpb24tNC4xLjEKICAgIC8vIFRoZSBjaGFyYWN0ZXJzIFsiLF0gYXJlIGdpdmVuIGEgcGFzcyBmcm9tIHRoZSBSRkMgcmVxdWlyZW1lbnRzIGJlY2F1c2UKICAgIC8vIGFwcGFyZW50bHkgYnJvd3NlcnMgZG8gbm90IGZvbGxvdyB0aGUgUkZDIHRvIHRoZSBsZXR0ZXIuCiAgICBpZiAoIC9bXiAtOjwtW1xdLX5dLy50ZXN0KHZhbHVlKSApIHsKICAgICAgICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7CiAgICB9CgogICAgY29uc3QgY29va2llQmVmb3JlID0gZ2V0Q29va2llRm4obmFtZSk7CiAgICBpZiAoIGNvb2tpZUJlZm9yZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuZG9udE92ZXJ3cml0ZSApIHsgcmV0dXJuOyB9CiAgICBpZiAoIGNvb2tpZUJlZm9yZSA9PT0gdmFsdWUgJiYgb3B0aW9ucy5yZWxvYWQgKSB7IHJldHVybjsgfQoKICAgIGNvbnN0IGNvb2tpZVBhcnRzID0gWyBuYW1lLCAnPScsIHZhbHVlIF07CiAgICBpZiAoIGV4cGlyZXMgIT09ICcnICkgewogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgZXhwaXJlcz0nLCBleHBpcmVzKTsKICAgIH0KCiAgICBpZiAoIHBhdGggPT09ICcnICkgeyBwYXRoID0gJy8nOyB9CiAgICBlbHNlIGlmICggcGF0aCA9PT0gJ25vbmUnICkgeyBwYXRoID0gJyc7IH0KICAgIGlmICggcGF0aCAhPT0gJycgJiYgcGF0aCAhPT0gJy8nICkgeyByZXR1cm47IH0KICAgIGlmICggcGF0aCA9PT0gJy8nICkgewogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgcGF0aD0vJyk7CiAgICB9CgogICAgaWYgKCB0cnVzdGVkICkgewogICAgICAgIGlmICggb3B0aW9ucy5kb21haW4gKSB7CiAgICAgICAgICAgIGNvb2tpZVBhcnRzLnB1c2goYDsgZG9tYWluPSR7b3B0aW9ucy5kb21haW59YCk7CiAgICAgICAgfQogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgU2VjdXJlJyk7CiAgICB9IGVsc2UgaWYgKCAvXl9fKEhvc3R8U2VjdXJlKS0vLnRlc3QobmFtZSkgKSB7CiAgICAgICAgY29va2llUGFydHMucHVzaCgnOyBTZWN1cmUnKTsKICAgIH0KCiAgICB0cnkgewogICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVBhcnRzLmpvaW4oJycpOwogICAgfSBjYXRjaChfKSB7CiAgICB9CgogICAgY29uc3QgZG9uZSA9IGdldENvb2tpZUZuKG5hbWUpID09PSB2YWx1ZTsKICAgIGlmICggZG9uZSAmJiBvcHRpb25zLnJlbG9hZCApIHsKICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICB9CgogICAgcmV0dXJuIGRvbmU7Cn0KZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CmZ1bmN0aW9uIGdldFNhZmVDb29raWVWYWx1ZXNGbigpIHsKICAgIHJldHVybiBbCiAgICAgICAgJ2FjY2VwdCcsICdyZWplY3QnLAogICAgICAgICdhY2NlcHRlZCcsICdyZWplY3RlZCcsICdub3RhY2NlcHRlZCcsCiAgICAgICAgJ2FsbG93JywgJ2Rpc2FsbG93JywgJ2RlbnknLAogICAgICAgICdhbGxvd2VkJywgJ2RlbmllZCcsCiAgICAgICAgJ2FwcHJvdmVkJywgJ2Rpc2FwcHJvdmVkJywKICAgICAgICAnY2hlY2tlZCcsICd1bmNoZWNrZWQnLAogICAgICAgICdkaXNtaXNzJywgJ2Rpc21pc3NlZCcsCiAgICAgICAgJ2VuYWJsZScsICdkaXNhYmxlJywKICAgICAgICAnZW5hYmxlZCcsICdkaXNhYmxlZCcsCiAgICAgICAgJ2Vzc2VudGlhbCcsICdub25lc3NlbnRpYWwnLAogICAgICAgICdoaWRlJywgJ2hpZGRlbicsCiAgICAgICAgJ25lY2Vzc2FyeScsICdyZXF1aXJlZCcsCiAgICAgICAgJ29rJywKICAgICAgICAnb24nLCAnb2ZmJywKICAgICAgICAndHJ1ZScsICd0JywgJ2ZhbHNlJywgJ2YnLAogICAgICAgICd5ZXMnLCAneScsICdubycsICduJywKICAgIF07Cn0KCiAgKGZ1bmN0aW9uIHNldENvb2tpZSgKICAgIG5hbWUgPSAnJywKICAgIHZhbHVlID0gJycsCiAgICBwYXRoID0gJycKKSB7CiAgICBpZiAoIG5hbWUgPT09ICcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgbG9nUHJlZml4ID0gc2FmZS5tYWtlTG9nUHJlZml4KCdzZXQtY29va2llJywgbmFtZSwgdmFsdWUsIHBhdGgpOwogICAgY29uc3Qgbm9ybWFsaXplZCA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7CiAgICBjb25zdCBtYXRjaCA9IC9eKCI/KSguKylcMSQvLmV4ZWMobm9ybWFsaXplZCk7CiAgICBjb25zdCB1bnF1b3RlZCA9IG1hdGNoICYmIG1hdGNoWzJdIHx8IG5vcm1hbGl6ZWQ7CiAgICBjb25zdCB2YWxpZFZhbHVlcyA9IGdldFNhZmVDb29raWVWYWx1ZXNGbigpOwogICAgaWYgKCB2YWxpZFZhbHVlcy5pbmNsdWRlcyh1bnF1b3RlZCkgPT09IGZhbHNlICkgewogICAgICAgIGlmICggL15cZCskLy50ZXN0KHVucXVvdGVkKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIGNvbnN0IG4gPSBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgICAgIGlmICggbiA+IDMyNzY3ICkgeyByZXR1cm47IH0KICAgIH0KCiAgICBjb25zdCBkb25lID0gc2V0Q29va2llRm4oCiAgICAgICAgZmFsc2UsCiAgICAgICAgbmFtZSwKICAgICAgICB2YWx1ZSwKICAgICAgICAnJywKICAgICAgICBwYXRoLAogICAgICAgIHNhZmUuZ2V0RXh0cmFBcmdzKEFycmF5LmZyb20oYXJndW1lbnRzKSwgMykKICAgICk7CgogICAgaWYgKCBkb25lICkgewogICAgICAgIHNhZmUudWJvTG9nKGxvZ1ByZWZpeCwgJ0RvbmUnKTsKICAgIH0KfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-session-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-attr.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-canvas.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"multiup.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG11bHRpdXAoKSB7CiAgICBjb25zdCBoYW5kbGVyID0gZXYgPT4gewogICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDsKICAgICAgICBpZiAoIHRhcmdldC5tYXRjaGVzKCdidXR0b25bbGlua10nKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIGNvbnN0IGFuY2VzdG9yID0gdGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgICAgICBpZiAoIGFuY2VzdG9yID09PSBudWxsICkgeyByZXR1cm47IH0KICAgICAgICBpZiAoIGFuY2VzdG9yICE9PSB0YXJnZXQucGFyZW50RWxlbWVudCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgbGluayA9ICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdsaW5rJykgfHwgJycpLnRyaW0oKTsKICAgICAgICBpZiAoIGxpbmsgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBsaW5rOwogICAgfTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlciwgeyBjYXB0dXJlOiB0cnVlIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"remove-cache-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CgogIChmdW5jdGlvbiByZW1vdmVDYWNoZVN0b3JhZ2VJdGVtKAogICAgY2FjaGVOYW1lUGF0dGVybiA9ICcnLAogICAgcmVxdWVzdFBhdHRlcm4gPSAnJwopIHsKICAgIGlmICggY2FjaGVOYW1lUGF0dGVybiA9PT0gJycgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCBsb2dQcmVmaXggPSBzYWZlLm1ha2VMb2dQcmVmaXgoJ3JlbW92ZS1jYWNoZS1zdG9yYWdlLWl0ZW0nLCBjYWNoZU5hbWVQYXR0ZXJuLCByZXF1ZXN0UGF0dGVybik7CiAgICBjb25zdCBjYWNoZVN0b3JhZ2UgPSBzZWxmLmNhY2hlczsKICAgIGlmICggY2FjaGVTdG9yYWdlIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICBjb25zdCByZUNhY2hlID0gc2FmZS5wYXR0ZXJuVG9SZWdleChjYWNoZU5hbWVQYXR0ZXJuLCB1bmRlZmluZWQsIHRydWUpOwogICAgY29uc3QgcmVSZXF1ZXN0ID0gc2FmZS5wYXR0ZXJuVG9SZWdleChyZXF1ZXN0UGF0dGVybiwgdW5kZWZpbmVkLCB0cnVlKTsKICAgIGNhY2hlU3RvcmFnZS5rZXlzKCkudGhlbihjYWNoZU5hbWVzID0+IHsKICAgICAgICBmb3IgKCBjb25zdCBjYWNoZU5hbWUgb2YgY2FjaGVOYW1lcyApIHsKICAgICAgICAgICAgaWYgKCByZUNhY2hlLnRlc3QoY2FjaGVOYW1lKSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIGlmICggcmVxdWVzdFBhdHRlcm4gPT09ICcnICkgewogICAgICAgICAgICAgICAgY2FjaGVTdG9yYWdlLmRlbGV0ZShjYWNoZU5hbWUpLnRoZW4ocmVzdWx0ID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAoIHNhZmUubG9nTGV2ZWwgPiAxICkgewogICAgICAgICAgICAgICAgICAgICAgICBzYWZlLnVib0xvZyhsb2dQcmVmaXgsIGBEZWxldGluZyAke2NhY2hlTmFtZX1gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXN1bHQgIT09IHRydWUgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgICAgIHNhZmUudWJvTG9nKGxvZ1ByZWZpeCwgYERlbGV0ZWQgJHtjYWNoZU5hbWV9OiAke3Jlc3VsdH1gKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FjaGVTdG9yYWdlLm9wZW4oY2FjaGVOYW1lKS50aGVuKGNhY2hlID0+IHsKICAgICAgICAgICAgICAgIGNhY2hlLmtleXMoKS50aGVuKHJlcXVlc3RzID0+IHsKICAgICAgICAgICAgICAgICAgICBmb3IgKCBjb25zdCByZXF1ZXN0IG9mIHJlcXVlc3RzICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlUmVxdWVzdC50ZXN0KHJlcXVlc3QudXJsKSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2FmZS5sb2dMZXZlbCA+IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlLnVib0xvZyhsb2dQcmVmaXgsIGBEZWxldGluZyAke2NhY2hlTmFtZX0vJHtyZXF1ZXN0LnVybH1gKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5kZWxldGUocmVxdWVzdCkudGhlbihyZXN1bHQgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXN1bHQgIT09IHRydWUgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZS51Ym9Mb2cobG9nUHJlZml4LCBgRGVsZXRlZCAke2NhY2hlTmFtZX0vJHtyZXF1ZXN0LnVybH06ICR7cmVzdWx0fWApOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"trusted-replace-node-text.js","aliases":["trusted-rpnt.js","replace-node-text.js","rpnt.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-constant.js","aliases":["trusted-set.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gdmFsaWRhdGVDb25zdGFudEZuKHRydXN0ZWQsIHJhdywgZXh0cmFBcmdzID0ge30pIHsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgbGV0IHZhbHVlOwogICAgaWYgKCByYXcgPT09ICd1bmRlZmluZWQnICkgewogICAgICAgIHZhbHVlID0gdW5kZWZpbmVkOwogICAgfSBlbHNlIGlmICggcmF3ID09PSAnZmFsc2UnICkgewogICAgICAgIHZhbHVlID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKCByYXcgPT09ICd0cnVlJyApIHsKICAgICAgICB2YWx1ZSA9IHRydWU7CiAgICB9IGVsc2UgaWYgKCByYXcgPT09ICdudWxsJyApIHsKICAgICAgICB2YWx1ZSA9IG51bGw7CiAgICB9IGVsc2UgaWYgKCByYXcgPT09ICInJyIgfHwgcmF3ID09PSAnJyApIHsKICAgICAgICB2YWx1ZSA9ICcnOwogICAgfSBlbHNlIGlmICggcmF3ID09PSAnW10nIHx8IHJhdyA9PT0gJ2VtcHR5QXJyJyApIHsKICAgICAgICB2YWx1ZSA9IFtdOwogICAgfSBlbHNlIGlmICggcmF3ID09PSAne30nIHx8IHJhdyA9PT0gJ2VtcHR5T2JqJyApIHsKICAgICAgICB2YWx1ZSA9IHt9OwogICAgfSBlbHNlIGlmICggcmF3ID09PSAnbm9vcEZ1bmMnICkgewogICAgICAgIHZhbHVlID0gZnVuY3Rpb24oKXt9OwogICAgfSBlbHNlIGlmICggcmF3ID09PSAndHJ1ZUZ1bmMnICkgewogICAgICAgIHZhbHVlID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRydWU7IH07CiAgICB9IGVsc2UgaWYgKCByYXcgPT09ICdmYWxzZUZ1bmMnICkgewogICAgICAgIHZhbHVlID0gZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlOyB9OwogICAgfSBlbHNlIGlmICggL14tP1xkKyQvLnRlc3QocmF3KSApIHsKICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHJhdyk7CiAgICAgICAgaWYgKCBpc05hTihyYXcpICkgeyByZXR1cm47IH0KICAgICAgICBpZiAoIE1hdGguYWJzKHJhdykgPiAweDdGRkYgKSB7IHJldHVybjsgfQogICAgfSBlbHNlIGlmICggdHJ1c3RlZCApIHsKICAgICAgICBpZiAoIHJhdy5zdGFydHNXaXRoKCd7JykgJiYgcmF3LmVuZHNXaXRoKCd9JykgKSB7CiAgICAgICAgICAgIHRyeSB7IHZhbHVlID0gc2FmZS5KU09OX3BhcnNlKHJhdykudmFsdWU7IH0gY2F0Y2goZXgpIHsgcmV0dXJuOyB9CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoIGV4dHJhQXJncy5hcyAhPT0gdW5kZWZpbmVkICkgewogICAgICAgIGlmICggZXh0cmFBcmdzLmFzID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICByZXR1cm4gKCApID0+IHZhbHVlOwogICAgICAgIH0gZWxzZSBpZiAoIGV4dHJhQXJncy5hcyA9PT0gJ2NhbGxiYWNrJyApIHsKICAgICAgICAgICAgcmV0dXJuICggKSA9PiAoKCApID0+IHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKCBleHRyYUFyZ3MuYXMgPT09ICdyZXNvbHZlZCcgKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoIGV4dHJhQXJncy5hcyA9PT0gJ3JlamVjdGVkJyApIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbHVlKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdmFsdWU7Cn0KZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIG9wdGlvbnMuZmxhZ3MgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCh0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsgcGF0dGVybiwgZXhwZWN0IH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGlmICggZGV0YWlscy5yZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5jbHVkZXMoZGV0YWlscy5wYXR0ZXJuKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSB0aGlzLmVzY2FwZVJlZ2V4Q2hhcnMocGF0dGVybik7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCB1bmRlZmluZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuT2JqZWN0X2Zyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayhmbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTsKICAgICAgICB9LAogICAgICAgIG9mZklkbGUoaWQpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2soaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICB9CiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zYWZlU2VsZiA9IHNhZmU7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHNhZmU7IH0KICAgIC8vIFRoaXMgaXMgZXhlY3V0ZWQgb25seSB3aGVuIHRoZSBsb2dnZXIgaXMgb3BlbmVkCiAgICBjb25zdCBiYyA9IG5ldyBzZWxmLkJyb2FkY2FzdENoYW5uZWwoc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCk7CiAgICBsZXQgYmNCdWZmZXIgPSBbXTsKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBzYWZlLnNlbmRUb0xvZ2dlciA9ICh0eXBlLCAuLi5hcmdzKSA9PiB7CiAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGV4dCA9IGBbJHtkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfV0ke2FyZ3Muam9pbignICcpfWA7CiAgICAgICAgaWYgKCBiY0J1ZmZlciA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KTsKICAgICAgICB9CiAgICAgICAgYmNCdWZmZXIucHVzaCh7IHR5cGUsIHRleHQgfSk7CiAgICB9OwogICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgIGNvbnN0IG1zZyA9IGV2LmRhdGE7CiAgICAgICAgc3dpdGNoICggbXNnICkgewogICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgYmNCdWZmZXIuZm9yRWFjaCgoeyB0eXBlLCB0ZXh0IH0pID0+CiAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJjQnVmZmVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvT25lJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3NldFNjcmlwdGxldExvZ0xldmVsVG9Ud28nOgogICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfTsKICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIHJldHVybiBzYWZlOwp9CmZ1bmN0aW9uIHJ1bkF0KGZuLCB3aGVuKSB7CiAgICBjb25zdCBpbnRGcm9tUmVhZHlTdGF0ZSA9IHN0YXRlID0+IHsKICAgICAgICBjb25zdCB0YXJnZXRzID0gewogICAgICAgICAgICAnbG9hZGluZyc6IDEsICdhc2FwJzogMSwKICAgICAgICAgICAgJ2ludGVyYWN0aXZlJzogMiwgJ2VuZCc6IDIsICcyJzogMiwKICAgICAgICAgICAgJ2NvbXBsZXRlJzogMywgJ2lkbGUnOiAzLCAnMyc6IDMsCiAgICAgICAgfTsKICAgICAgICBjb25zdCB0b2tlbnMgPSBBcnJheS5pc0FycmF5KHN0YXRlKSA/IHN0YXRlIDogWyBzdGF0ZSBdOwogICAgICAgIGZvciAoIGNvbnN0IHRva2VuIG9mIHRva2VucyApIHsKICAgICAgICAgICAgY29uc3QgcHJvcCA9IGAke3Rva2VufWA7CiAgICAgICAgICAgIGlmICggdGFyZ2V0cy5oYXNPd25Qcm9wZXJ0eShwcm9wKSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0YXJnZXRzW3Byb3BdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH07CiAgICBjb25zdCBydW5BdCA9IGludEZyb21SZWFkeVN0YXRlKHdoZW4pOwogICAgaWYgKCBpbnRGcm9tUmVhZHlTdGF0ZShkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSBydW5BdCApIHsKICAgICAgICBmbigpOyByZXR1cm47CiAgICB9CiAgICBjb25zdCBvblN0YXRlQ2hhbmdlID0gKCApID0+IHsKICAgICAgICBpZiAoIGludEZyb21SZWFkeVN0YXRlKGRvY3VtZW50LnJlYWR5U3RhdGUpIDwgcnVuQXQgKSB7IHJldHVybjsgfQogICAgICAgIGZuKCk7CiAgICAgICAgc2FmZS5yZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KGRvY3VtZW50LCBhcmdzKTsKICAgIH07CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IGFyZ3MgPSBbICdyZWFkeXN0YXRlY2hhbmdlJywgb25TdGF0ZUNoYW5nZSwgeyBjYXB0dXJlOiB0cnVlIH0gXTsKICAgIHNhZmUuYWRkRXZlbnRMaXN0ZW5lci5hcHBseShkb2N1bWVudCwgYXJncyk7Cn0KZnVuY3Rpb24gc2V0Q29uc3RhbnRGbigKICAgIHRydXN0ZWQgPSBmYWxzZSwKICAgIGNoYWluID0gJycsCiAgICByYXdWYWx1ZSA9ICcnCikgewogICAgaWYgKCBjaGFpbiA9PT0gJycgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCBsb2dQcmVmaXggPSBzYWZlLm1ha2VMb2dQcmVmaXgoJ3NldC1jb25zdGFudCcsIGNoYWluLCByYXdWYWx1ZSk7CiAgICBjb25zdCBleHRyYUFyZ3MgPSBzYWZlLmdldEV4dHJhQXJncyhBcnJheS5mcm9tKGFyZ3VtZW50cyksIDMpOwogICAgZnVuY3Rpb24gc2V0Q29uc3RhbnQoY2hhaW4sIHJhd1ZhbHVlKSB7CiAgICAgICAgY29uc3QgdHJhcHBlZFByb3AgPSAoKCApID0+IHsKICAgICAgICAgICAgY29uc3QgcG9zID0gY2hhaW4ubGFzdEluZGV4T2YoJy4nKTsKICAgICAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgeyByZXR1cm4gY2hhaW47IH0KICAgICAgICAgICAgcmV0dXJuIGNoYWluLnNsaWNlKHBvcysxKTsKICAgICAgICB9KSgpOwogICAgICAgIGNvbnN0IGNsb2FrRnVuYyA9IGZuID0+IHsKICAgICAgICAgICAgc2FmZS5PYmplY3RfZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywgeyB2YWx1ZTogdHJhcHBlZFByb3AgfSk7CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkoZm4sIHsKICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcCkgewogICAgICAgICAgICAgICAgICAgIGlmICggcHJvcCAhPT0gJ3RvU3RyaW5nJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoLi4uYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wICE9PSAndG9TdHJpbmcnICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSguLi5hcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wID09PSAndG9TdHJpbmcnICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYGZ1bmN0aW9uICR7dHJhcHBlZFByb3B9KCkgeyBbbmF0aXZlIGNvZGVdIH1gOwogICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQobnVsbCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCguLi5hcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICBpZiAoIHRyYXBwZWRQcm9wID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgdGhpc1NjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ7CiAgICAgICAgbGV0IG5vcm1hbFZhbHVlID0gdmFsaWRhdGVDb25zdGFudEZuKHRydXN0ZWQsIHJhd1ZhbHVlLCBleHRyYUFyZ3MpOwogICAgICAgIGlmICggcmF3VmFsdWUgPT09ICdub29wRnVuYycgfHwgcmF3VmFsdWUgPT09ICd0cnVlRnVuYycgfHwgcmF3VmFsdWUgPT09ICdmYWxzZUZ1bmMnICkgewogICAgICAgICAgICBub3JtYWxWYWx1ZSA9IGNsb2FrRnVuYyhub3JtYWxWYWx1ZSk7CiAgICAgICAgfQogICAgICAgIGxldCBhYm9ydGVkID0gZmFsc2U7CiAgICAgICAgY29uc3QgbXVzdEFib3J0ID0gZnVuY3Rpb24odikgewogICAgICAgICAgICBpZiAoIHRydXN0ZWQgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAgICAgICBpZiAoIGFib3J0ZWQgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIGFib3J0ZWQgPQogICAgICAgICAgICAgICAgKHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsKSAmJgogICAgICAgICAgICAgICAgKG5vcm1hbFZhbHVlICE9PSB1bmRlZmluZWQgJiYgbm9ybWFsVmFsdWUgIT09IG51bGwpICYmCiAgICAgICAgICAgICAgICAodHlwZW9mIHYgIT09IHR5cGVvZiBub3JtYWxWYWx1ZSk7CiAgICAgICAgICAgIGlmICggYWJvcnRlZCApIHsKICAgICAgICAgICAgICAgIHNhZmUudWJvTG9nKGxvZ1ByZWZpeCwgYEFib3J0ZWQgYmVjYXVzZSB2YWx1ZSBzZXQgdG8gJHt2fWApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBhYm9ydGVkOwogICAgICAgIH07CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VCbG9ja09yaWdpbi91QmxvY2staXNzdWVzL2lzc3Vlcy8xNTYKICAgICAgICAvLyAgIFN1cHBvcnQgbXVsdGlwbGUgdHJhcHBlcnMgZm9yIHRoZSBzYW1lIHByb3BlcnR5LgogICAgICAgIGNvbnN0IHRyYXBQcm9wID0gZnVuY3Rpb24ob3duZXIsIHByb3AsIGNvbmZpZ3VyYWJsZSwgaGFuZGxlcikgewogICAgICAgICAgICBpZiAoIGhhbmRsZXIuaW5pdChjb25maWd1cmFibGUgPyBvd25lcltwcm9wXSA6IG5vcm1hbFZhbHVlKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBjb25zdCBvZGVzYyA9IHNhZmUuT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcihvd25lciwgcHJvcCk7CiAgICAgICAgICAgIGxldCBwcmV2R2V0dGVyLCBwcmV2U2V0dGVyOwogICAgICAgICAgICBpZiAoIG9kZXNjIGluc3RhbmNlb2Ygc2FmZS5PYmplY3QgKSB7CiAgICAgICAgICAgICAgICBvd25lcltwcm9wXSA9IG5vcm1hbFZhbHVlOwogICAgICAgICAgICAgICAgaWYgKCBvZGVzYy5nZXQgaW5zdGFuY2VvZiBGdW5jdGlvbiApIHsKICAgICAgICAgICAgICAgICAgICBwcmV2R2V0dGVyID0gb2Rlc2MuZ2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBvZGVzYy5zZXQgaW5zdGFuY2VvZiBGdW5jdGlvbiApIHsKICAgICAgICAgICAgICAgICAgICBwcmV2U2V0dGVyID0gb2Rlc2Muc2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBzYWZlLk9iamVjdF9kZWZpbmVQcm9wZXJ0eShvd25lciwgcHJvcCwgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZSwKICAgICAgICAgICAgICAgICAgICBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJldkdldHRlciAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkdldHRlcigpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmdldHRlcigpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2V0KGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmV2U2V0dGVyICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2U2V0dGVyKGEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuc2V0dGVyKGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgc2FmZS51Ym9Mb2cobG9nUHJlZml4LCAnVHJhcCBpbnN0YWxsZWQnKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICAgICAgc2FmZS51Ym9FcnIobG9nUHJlZml4LCBleCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IHRyYXBDaGFpbiA9IGZ1bmN0aW9uKG93bmVyLCBjaGFpbikgewogICAgICAgICAgICBjb25zdCBwb3MgPSBjaGFpbi5pbmRleE9mKCcuJyk7CiAgICAgICAgICAgIGlmICggcG9zID09PSAtMSApIHsKICAgICAgICAgICAgICAgIHRyYXBQcm9wKG93bmVyLCBjaGFpbiwgZmFsc2UsIHsKICAgICAgICAgICAgICAgICAgICB2OiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24odikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG11c3RBYm9ydCh2KSApIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudiA9IHY7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZ2V0dGVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID09PSB0aGlzU2NyaXB0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBzYWZlLnVib0xvZyhsb2dQcmVmaXgsICdQcm9wZXJ0eSByZWFkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxWYWx1ZTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNldHRlcjogZnVuY3Rpb24oYSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG11c3RBYm9ydChhKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxWYWx1ZSA9IGE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgcHJvcCA9IGNoYWluLnNsaWNlKDAsIHBvcyk7CiAgICAgICAgICAgIGNvbnN0IHYgPSBvd25lcltwcm9wXTsKICAgICAgICAgICAgY2hhaW4gPSBjaGFpbi5zbGljZShwb3MgKyAxKTsKICAgICAgICAgICAgaWYgKCB2IGluc3RhbmNlb2Ygc2FmZS5PYmplY3QgfHwgdHlwZW9mIHYgPT09ICdvYmplY3QnICYmIHYgIT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICB0cmFwQ2hhaW4odiwgY2hhaW4pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyYXBQcm9wKG93bmVyLCBwcm9wLCB0cnVlLCB7CiAgICAgICAgICAgICAgICB2OiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy52ID0gdjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBnZXR0ZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnY7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2V0dGVyOiBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy52ID0gYTsKICAgICAgICAgICAgICAgICAgICBpZiAoIGEgaW5zdGFuY2VvZiBzYWZlLk9iamVjdCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJhcENoYWluKGEsIGNoYWluKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgdHJhcENoYWluKHdpbmRvdywgY2hhaW4pOwogICAgfQogICAgcnVuQXQoKCApID0+IHsKICAgICAgICBzZXRDb25zdGFudChjaGFpbiwgcmF3VmFsdWUpOwogICAgfSwgZXh0cmFBcmdzLnJ1bkF0KTsKfQoKICAoZnVuY3Rpb24gdHJ1c3RlZFNldENvbnN0YW50KAogICAgLi4uYXJncwopIHsKICAgIHNldENvbnN0YW50Rm4odHJ1ZSwgLi4uYXJncyk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"trusted-set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-session-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-fetch-response.js","aliases":["trusted-rpfr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-click-element.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-inbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-outbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gZ2V0UmFuZG9tVG9rZW4oKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIHJldHVybiBzYWZlLlN0cmluZ19mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICBzYWZlLk1hdGhfZmxvb3Ioc2FmZS5NYXRoX3JhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7Cn0KZnVuY3Rpb24gZ2V0RXhjZXB0aW9uVG9rZW4oKSB7CiAgICBjb25zdCB0b2tlbiA9IGdldFJhbmRvbVRva2VuKCk7CiAgICBjb25zdCBvZSA9IHNlbGYub25lcnJvcjsKICAgIHNlbGYub25lcnJvciA9IGZ1bmN0aW9uKG1zZywgLi4uYXJncykgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluY2x1ZGVzKHRva2VuKSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZS5jYWxsKHRoaXMsIG1zZywgLi4uYXJncyk7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICByZXR1cm4gdG9rZW47Cn0KZnVuY3Rpb24gb2JqZWN0RmluZE93bmVyRm4oCiAgICByb290LAogICAgcGF0aCwKICAgIHBydW5lID0gZmFsc2UKKSB7CiAgICBsZXQgb3duZXIgPSByb290OwogICAgbGV0IGNoYWluID0gcGF0aDsKICAgIGZvciAoOzspIHsKICAgICAgICBpZiAoIHR5cGVvZiBvd25lciAhPT0gJ29iamVjdCcgfHwgb3duZXIgPT09IG51bGwgICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICBjb25zdCBwb3MgPSBjaGFpbi5pbmRleE9mKCcuJyk7CiAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgewogICAgICAgICAgICBpZiAoIHBydW5lID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBvd25lci5oYXNPd25Qcm9wZXJ0eShjaGFpbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IG1vZGlmaWVkID0gZmFsc2U7CiAgICAgICAgICAgIGlmICggY2hhaW4gPT09ICcqJyApIHsKICAgICAgICAgICAgICAgIGZvciAoIGNvbnN0IGtleSBpbiBvd25lciApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIG93bmVyLmhhc093blByb3BlcnR5KGtleSkgPT09IGZhbHNlICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvd25lcltrZXldOwogICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICggb3duZXIuaGFzT3duUHJvcGVydHkoY2hhaW4pICkgewogICAgICAgICAgICAgICAgZGVsZXRlIG93bmVyW2NoYWluXTsKICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbW9kaWZpZWQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByb3AgPSBjaGFpbi5zbGljZSgwLCBwb3MpOwogICAgICAgIGNvbnN0IG5leHQgPSBjaGFpbi5zbGljZShwb3MgKyAxKTsKICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTsKICAgICAgICBpZiAoIHByb3AgPT09ICdbLV0nICYmIEFycmF5LmlzQXJyYXkob3duZXIpICkgewogICAgICAgICAgICBsZXQgaSA9IG93bmVyLmxlbmd0aDsKICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgICAgICAgICBpZiAoIG9iamVjdEZpbmRPd25lckZuKG93bmVyW2ldLCBuZXh0KSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICBvd25lci5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwogICAgICAgIH0KICAgICAgICBpZiAoIHByb3AgPT09ICd7LX0nICYmIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ICkgewogICAgICAgICAgICBmb3IgKCBjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob3duZXIpICkgewogICAgICAgICAgICAgICAgaWYgKCBvYmplY3RGaW5kT3duZXJGbihvd25lcltrZXldLCBuZXh0KSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICBkZWxldGUgb3duZXJba2V5XTsKICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgfQogICAgICAgIGlmICgKICAgICAgICAgICAgcHJvcCA9PT0gJ1tdJyAmJiBBcnJheS5pc0FycmF5KG93bmVyKSB8fAogICAgICAgICAgICBwcm9wID09PSAne30nICYmIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0IHx8CiAgICAgICAgICAgIHByb3AgPT09ICcqJyAmJiBvd25lciBpbnN0YW5jZW9mIE9iamVjdAogICAgICAgICkgewogICAgICAgICAgICBmb3IgKCBjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob3duZXIpICkgewogICAgICAgICAgICAgICAgaWYgKG9iamVjdEZpbmRPd25lckZuKG93bmVyW2tleV0sIG5leHQsIHBydW5lKSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwogICAgICAgIH0KICAgICAgICBpZiAoIG93bmVyLmhhc093blByb3BlcnR5KHByb3ApID09PSBmYWxzZSApIHsgcmV0dXJuIGZhbHNlOyB9CiAgICAgICAgb3duZXIgPSBvd25lcltwcm9wXTsKICAgICAgICBjaGFpbiA9IGNoYWluLnNsaWNlKHBvcyArIDEpOwogICAgfQp9CmZ1bmN0aW9uIG1hdGNoZXNTdGFja1RyYWNlKAogICAgbmVlZGxlRGV0YWlscywKICAgIGxvZ0xldmVsID0gJycKKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IGV4Y2VwdGlvblRva2VuID0gZ2V0RXhjZXB0aW9uVG9rZW4oKTsKICAgIGNvbnN0IGVycm9yID0gbmV3IHNhZmUuRXJyb3IoZXhjZXB0aW9uVG9rZW4pOwogICAgY29uc3QgZG9jVVJMID0gbmV3IFVSTChzZWxmLmxvY2F0aW9uLmhyZWYpOwogICAgZG9jVVJMLmhhc2ggPSAnJzsKICAgIC8vIE5vcm1hbGl6ZSBzdGFjayB0cmFjZQogICAgY29uc3QgcmVMaW5lID0gLyguKj9AKT8oXFMrKSg6XGQrKTpcZCtcKT8kLzsKICAgIGNvbnN0IGxpbmVzID0gW107CiAgICBmb3IgKCBsZXQgbGluZSBvZiBlcnJvci5zdGFjay5zcGxpdCgvW1xuXHJdKy8pICkgewogICAgICAgIGlmICggbGluZS5pbmNsdWRlcyhleGNlcHRpb25Ub2tlbikgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgbGluZSA9IGxpbmUudHJpbSgpOwogICAgICAgIGNvbnN0IG1hdGNoID0gc2FmZS5SZWdFeHBfZXhlYy5jYWxsKHJlTGluZSwgbGluZSk7CiAgICAgICAgaWYgKCBtYXRjaCA9PT0gbnVsbCApIHsgY29udGludWU7IH0KICAgICAgICBsZXQgdXJsID0gbWF0Y2hbMl07CiAgICAgICAgaWYgKCB1cmwuc3RhcnRzV2l0aCgnKCcpICkgeyB1cmwgPSB1cmwuc2xpY2UoMSk7IH0KICAgICAgICBpZiAoIHVybCA9PT0gZG9jVVJMLmhyZWYgKSB7CiAgICAgICAgICAgIHVybCA9ICdpbmxpbmVTY3JpcHQnOwogICAgICAgIH0gZWxzZSBpZiAoIHVybC5zdGFydHNXaXRoKCc8YW5vbnltb3VzPicpICkgewogICAgICAgICAgICB1cmwgPSAnaW5qZWN0ZWRTY3JpcHQnOwogICAgICAgIH0KICAgICAgICBsZXQgZm4gPSBtYXRjaFsxXSAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgID8gbWF0Y2hbMV0uc2xpY2UoMCwgLTEpCiAgICAgICAgICAgIDogbGluZS5zbGljZSgwLCBtYXRjaC5pbmRleCkudHJpbSgpOwogICAgICAgIGlmICggZm4uc3RhcnRzV2l0aCgnYXQnKSApIHsgZm4gPSBmbi5zbGljZSgyKS50cmltKCk7IH0KICAgICAgICBsZXQgcm93Y29sID0gbWF0Y2hbM107CiAgICAgICAgbGluZXMucHVzaCgnICcgKyBgJHtmbn0gJHt1cmx9JHtyb3djb2x9OjFgLnRyaW0oKSk7CiAgICB9CiAgICBsaW5lc1swXSA9IGBzdGFja0RlcHRoOiR7bGluZXMubGVuZ3RoLTF9YDsKICAgIGNvbnN0IHN0YWNrID0gbGluZXMuam9pbignXHQnKTsKICAgIGNvbnN0IHIgPSBuZWVkbGVEZXRhaWxzLm1hdGNoQWxsICE9PSB0cnVlICYmCiAgICAgICAgc2FmZS50ZXN0UGF0dGVybihuZWVkbGVEZXRhaWxzLCBzdGFjayk7CiAgICBpZiAoCiAgICAgICAgbG9nTGV2ZWwgPT09ICdhbGwnIHx8CiAgICAgICAgbG9nTGV2ZWwgPT09ICdtYXRjaCcgJiYgciB8fAogICAgICAgIGxvZ0xldmVsID09PSAnbm9tYXRjaCcgJiYgIXIKICAgICkgewogICAgICAgIHNhZmUudWJvTG9nKHN0YWNrLnJlcGxhY2UoL1x0L2csICdcbicpKTsKICAgIH0KICAgIHJldHVybiByOwp9CmZ1bmN0aW9uIHNhZmVTZWxmKCkgewogICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLnNhZmVTZWxmICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLnNhZmVTZWxmOwogICAgfQogICAgY29uc3Qgc2VsZiA9IGdsb2JhbFRoaXM7CiAgICBjb25zdCBzYWZlID0gewogICAgICAgICdBcnJheV9mcm9tJzogQXJyYXkuZnJvbSwKICAgICAgICAnRXJyb3InOiBzZWxmLkVycm9yLAogICAgICAgICdGdW5jdGlvbl90b1N0cmluZ0ZuJzogc2VsZi5GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nJzogdGhpc0FyZyA9PiBzYWZlLkZ1bmN0aW9uX3RvU3RyaW5nRm4uY2FsbCh0aGlzQXJnKSwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfbWF4JzogTWF0aC5tYXgsCiAgICAgICAgJ01hdGhfbWluJzogTWF0aC5taW4sCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdCc6IE9iamVjdCwKICAgICAgICAnT2JqZWN0X2RlZmluZVByb3BlcnR5JzogT2JqZWN0LmRlZmluZVByb3BlcnR5LmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2RlZmluZVByb3BlcnRpZXMnOiBPYmplY3QuZGVmaW5lUHJvcGVydGllcy5iaW5kKE9iamVjdCksCiAgICAgICAgJ09iamVjdF9mcm9tRW50cmllcyc6IE9iamVjdC5mcm9tRW50cmllcy5iaW5kKE9iamVjdCksCiAgICAgICAgJ09iamVjdF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmJpbmQoT2JqZWN0KSwKICAgICAgICAnUmVnRXhwJzogc2VsZi5SZWdFeHAsCiAgICAgICAgJ1JlZ0V4cF90ZXN0Jzogc2VsZi5SZWdFeHAucHJvdG90eXBlLnRlc3QsCiAgICAgICAgJ1JlZ0V4cF9leGVjJzogc2VsZi5SZWdFeHAucHJvdG90eXBlLmV4ZWMsCiAgICAgICAgJ1JlcXVlc3RfY2xvbmUnOiBzZWxmLlJlcXVlc3QucHJvdG90eXBlLmNsb25lLAogICAgICAgICdTdHJpbmdfZnJvbUNoYXJDb2RlJzogU3RyaW5nLmZyb21DaGFyQ29kZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgLy8gUHJvcGVydGllcwogICAgICAgIGxvZ0xldmVsOiAwLAogICAgICAgIC8vIE1ldGhvZHMKICAgICAgICBtYWtlTG9nUHJlZml4KC4uLmFyZ3MpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyICYmIGBbJHthcmdzLmpvaW4oJyBcdTIwNUQgJyl9XWAgfHwgJyc7CiAgICAgICAgfSwKICAgICAgICB1Ym9Mb2coLi4uYXJncykgewogICAgICAgICAgICBpZiAoIHRoaXMuc2VuZFRvTG9nZ2VyID09PSB1bmRlZmluZWQgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzWzBdID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRUb0xvZ2dlcignaW5mbycsIC4uLmFyZ3MpOwogICAgICAgICAgICAKICAgICAgICB9LAogICAgICAgIHVib0VyciguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdlcnJvcicsIC4uLmFyZ3MpOwogICAgICAgIH0sCiAgICAgICAgZXNjYXBlUmVnZXhDaGFycyhzKSB7CiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpOwogICAgICAgIH0sCiAgICAgICAgaW5pdFBhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXRjaEFsbDogdHJ1ZSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGV4cGVjdCA9IChvcHRpb25zLmNhbk5lZ2F0ZSAhPT0gdHJ1ZSB8fCBwYXR0ZXJuLnN0YXJ0c1dpdGgoJyEnKSA9PT0gZmFsc2UpOwogICAgICAgICAgICBpZiAoIGV4cGVjdCA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5zbGljZSgxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBtYXRjaCA9IC9eXC8oLispXC8oW2dpbXN1XSopJC8uZXhlYyhwYXR0ZXJuKTsKICAgICAgICAgICAgaWYgKCBtYXRjaCAhPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cCgKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdIHx8IG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIGV4cGVjdCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBvcHRpb25zLmZsYWdzICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAodGhpcy5lc2NhcGVSZWdleENoYXJzKHBhdHRlcm4pLAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7IHBhdHRlcm4sIGV4cGVjdCB9OwogICAgICAgIH0sCiAgICAgICAgdGVzdFBhdHRlcm4oZGV0YWlscywgaGF5c3RhY2spIHsKICAgICAgICAgICAgaWYgKCBkZXRhaWxzLm1hdGNoQWxsICkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICBpZiAoIGRldGFpbHMucmUgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5SZWdFeHBfdGVzdC5jYWxsKGRldGFpbHMucmUsIGhheXN0YWNrKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGhheXN0YWNrLmluY2x1ZGVzKGRldGFpbHMucGF0dGVybikgPT09IGRldGFpbHMuZXhwZWN0OwogICAgICAgIH0sCiAgICAgICAgcGF0dGVyblRvUmVnZXgocGF0dGVybiwgZmxhZ3MgPSB1bmRlZmluZWQsIHZlcmJhdGltID0gZmFsc2UpIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsgcmV0dXJuIC9eLzsgfQogICAgICAgICAgICBjb25zdCBtYXRjaCA9IC9eXC8oLispXC8oW2dpbXN1XSopJC8uZXhlYyhwYXR0ZXJuKTsKICAgICAgICAgICAgaWYgKCBtYXRjaCA9PT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlU3RyID0gdGhpcy5lc2NhcGVSZWdleENoYXJzKHBhdHRlcm4pOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodmVyYmF0aW0gPyBgXiR7cmVTdHJ9JGAgOiByZVN0ciwgZmxhZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0gfHwgdW5kZWZpbmVkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAvXi87CiAgICAgICAgfSwKICAgICAgICBnZXRFeHRyYUFyZ3MoYXJncywgb2Zmc2V0ID0gMCkgewogICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gYXJncy5zbGljZShvZmZzZXQpLnJlZHVjZSgob3V0LCB2LCBpLCBhKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoIChpICYgMSkgPT09IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3VmFsdWUgPSBhW2krMV07CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAvXlxkKyQvLnRlc3QocmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQocmF3VmFsdWUsIDEwKQogICAgICAgICAgICAgICAgICAgICAgICA6IHJhd1ZhbHVlOwogICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFsgYVtpXSwgdmFsdWUgXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgICAgICB9LCBbXSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLk9iamVjdF9mcm9tRW50cmllcyhlbnRyaWVzKTsKICAgICAgICB9LAogICAgICAgIG9uSWRsZShmbiwgb3B0aW9ucykgewogICAgICAgICAgICBpZiAoIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayApIHsKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2soZm4sIG9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7CiAgICAgICAgfSwKICAgICAgICBvZmZJZGxlKGlkKSB7CiAgICAgICAgICAgIGlmICggc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrKGlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VsZi5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7CiAgICAgICAgfQogICAgfTsKICAgIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgPSBzYWZlOwogICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmJjU2VjcmV0ID09PSB1bmRlZmluZWQgKSB7IHJldHVybiBzYWZlOyB9CiAgICAvLyBUaGlzIGlzIGV4ZWN1dGVkIG9ubHkgd2hlbiB0aGUgbG9nZ2VyIGlzIG9wZW5lZAogICAgY29uc3QgYmMgPSBuZXcgc2VsZi5Ccm9hZGNhc3RDaGFubmVsKHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQpOwogICAgbGV0IGJjQnVmZmVyID0gW107CiAgICBzYWZlLmxvZ0xldmVsID0gc2NyaXB0bGV0R2xvYmFscy5sb2dMZXZlbCB8fCAxOwogICAgc2FmZS5zZW5kVG9Mb2dnZXIgPSAodHlwZSwgLi4uYXJncykgPT4gewogICAgICAgIGlmICggYXJncy5sZW5ndGggPT09IDAgKSB7IHJldHVybjsgfQogICAgICAgIGNvbnN0IHRleHQgPSBgWyR7ZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgfHwgZG9jdW1lbnQubG9jYXRpb24uaHJlZn1dJHthcmdzLmpvaW4oJyAnKX1gOwogICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgcmV0dXJuIGJjLnBvc3RNZXNzYWdlKHsgd2hhdDogJ21lc3NhZ2VUb0xvZ2dlcicsIHR5cGUsIHRleHQgfSk7CiAgICAgICAgfQogICAgICAgIGJjQnVmZmVyLnB1c2goeyB0eXBlLCB0ZXh0IH0pOwogICAgfTsKICAgIGJjLm9ubWVzc2FnZSA9IGV2ID0+IHsKICAgICAgICBjb25zdCBtc2cgPSBldi5kYXRhOwogICAgICAgIHN3aXRjaCAoIG1zZyApIHsKICAgICAgICBjYXNlICdpYW1yZWFkeSEnOgogICAgICAgICAgICBpZiAoIGJjQnVmZmVyID09PSB1bmRlZmluZWQgKSB7IGJyZWFrOyB9CiAgICAgICAgICAgIGJjQnVmZmVyLmZvckVhY2goKHsgdHlwZSwgdGV4dCB9KSA9PgogICAgICAgICAgICAgICAgYmMucG9zdE1lc3NhZ2UoeyB3aGF0OiAnbWVzc2FnZVRvTG9nZ2VyJywgdHlwZSwgdGV4dCB9KQogICAgICAgICAgICApOwogICAgICAgICAgICBiY0J1ZmZlciA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnc2V0U2NyaXB0bGV0TG9nTGV2ZWxUb09uZSc6CiAgICAgICAgICAgIHNhZmUubG9nTGV2ZWwgPSAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvVHdvJzoKICAgICAgICAgICAgc2FmZS5sb2dMZXZlbCA9IDI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH07CiAgICBiYy5wb3N0TWVzc2FnZSgnYXJleW91cmVhZHk/Jyk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBwcm94eUFwcGx5Rm4oCiAgICB0YXJnZXQgPSAnJywKICAgIGhhbmRsZXIgPSAnJwopIHsKICAgIGxldCBjb250ZXh0ID0gZ2xvYmFsVGhpczsKICAgIGxldCBwcm9wID0gdGFyZ2V0OwogICAgZm9yICg7OykgewogICAgICAgIGNvbnN0IHBvcyA9IHByb3AuaW5kZXhPZignLicpOwogICAgICAgIGlmICggcG9zID09PSAtMSApIHsgYnJlYWs7IH0KICAgICAgICBjb250ZXh0ID0gY29udGV4dFtwcm9wLnNsaWNlKDAsIHBvcyldOwogICAgICAgIGlmICggY29udGV4dCBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIHByb3AgPSBwcm9wLnNsaWNlKHBvcysxKTsKICAgIH0KICAgIGNvbnN0IGZuID0gY29udGV4dFtwcm9wXTsKICAgIGlmICggdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nICkgeyByZXR1cm47IH0KICAgIGNvbnN0IGZuU3RyID0gZm4udG9TdHJpbmcoKTsKICAgIGNvbnN0IHRvU3RyaW5nID0gKGZ1bmN0aW9uIHRvU3RyaW5nKCkgeyByZXR1cm4gZm5TdHI7IH0pLmJpbmQobnVsbCk7CiAgICBpZiAoIGZuLnByb3RvdHlwZSAmJiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPT09IGZuICkgewogICAgICAgIGNvbnRleHRbcHJvcF0gPSBuZXcgUHJveHkoZm4sIHsKICAgICAgICAgICAgY29uc3RydWN0OiBoYW5kbGVyLAogICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgewogICAgICAgICAgICAgICAgaWYgKCBwcm9wID09PSAndG9TdHJpbmcnICkgeyByZXR1cm4gdG9TdHJpbmc7IH0KICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IFJlZmxlY3QuY29uc3RydWN0KC4uLmFyZ3MpOwogICAgfQogICAgY29udGV4dFtwcm9wXSA9IG5ldyBQcm94eShmbiwgewogICAgICAgIGFwcGx5OiBoYW5kbGVyLAogICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgICAgICAgIGlmICggcHJvcCA9PT0gJ3RvU3RyaW5nJyApIHsgcmV0dXJuIHRvU3RyaW5nOyB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICAgICAgICB9LAogICAgfSk7CiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IFJlZmxlY3QuYXBwbHkoLi4uYXJncyk7Cn0KZnVuY3Rpb24gb2JqZWN0UHJ1bmVGbigKICAgIG9iaiwKICAgIHJhd1BydW5lUGF0aHMsCiAgICByYXdOZWVkbGVQYXRocywKICAgIHN0YWNrTmVlZGxlRGV0YWlscyA9IHsgbWF0Y2hBbGw6IHRydWUgfSwKICAgIGV4dHJhQXJncyA9IHt9CikgewogICAgaWYgKCB0eXBlb2YgcmF3UHJ1bmVQYXRocyAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgY29uc3QgcHJ1bmVQYXRocyA9IHJhd1BydW5lUGF0aHMgIT09ICcnCiAgICAgICAgPyByYXdQcnVuZVBhdGhzLnNwbGl0KC8gKy8pCiAgICAgICAgOiBbXTsKICAgIGNvbnN0IG5lZWRsZVBhdGhzID0gcHJ1bmVQYXRocy5sZW5ndGggIT09IDAgJiYgcmF3TmVlZGxlUGF0aHMgIT09ICcnCiAgICAgICAgPyByYXdOZWVkbGVQYXRocy5zcGxpdCgvICsvKQogICAgICAgIDogW107CiAgICBpZiAoIHN0YWNrTmVlZGxlRGV0YWlscy5tYXRjaEFsbCAhPT0gdHJ1ZSApIHsKICAgICAgICBpZiAoIG1hdGNoZXNTdGFja1RyYWNlKHN0YWNrTmVlZGxlRGV0YWlscywgZXh0cmFBcmdzLmxvZ3N0YWNrKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBpZiAoIG9iamVjdFBydW5lRm4ubXVzdFByb2Nlc3MgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICBvYmplY3RQcnVuZUZuLm11c3RQcm9jZXNzID0gKHJvb3QsIG5lZWRsZVBhdGhzKSA9PiB7CiAgICAgICAgICAgIGZvciAoIGNvbnN0IG5lZWRsZVBhdGggb2YgbmVlZGxlUGF0aHMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIG9iamVjdEZpbmRPd25lckZuKHJvb3QsIG5lZWRsZVBhdGgpID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfTsKICAgIH0KICAgIGlmICggcHJ1bmVQYXRocy5sZW5ndGggPT09IDAgKSB7IHJldHVybjsgfQogICAgbGV0IG91dGNvbWUgPSAnbm9tYXRjaCc7CiAgICBpZiAoIG9iamVjdFBydW5lRm4ubXVzdFByb2Nlc3Mob2JqLCBuZWVkbGVQYXRocykgKSB7CiAgICAgICAgZm9yICggY29uc3QgcGF0aCBvZiBwcnVuZVBhdGhzICkgewogICAgICAgICAgICBpZiAoIG9iamVjdEZpbmRPd25lckZuKG9iaiwgcGF0aCwgdHJ1ZSkgKSB7CiAgICAgICAgICAgICAgICBvdXRjb21lID0gJ21hdGNoJzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmICggb3V0Y29tZSA9PT0gJ21hdGNoJyApIHsgcmV0dXJuIG9iajsgfQp9CgogIChmdW5jdGlvbiB0cnVzdGVkUHJ1bmVPdXRib3VuZE9iamVjdCgKICAgIHByb3BDaGFpbiA9ICcnLAogICAgcmF3UHJ1bmVQYXRocyA9ICcnLAogICAgcmF3TmVlZGxlUGF0aHMgPSAnJwopIHsKICAgIGlmICggcHJvcENoYWluID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IGV4dHJhQXJncyA9IHNhZmUuZ2V0RXh0cmFBcmdzKEFycmF5LmZyb20oYXJndW1lbnRzKSwgMyk7CiAgICBjb25zdCByZWZsZWN0b3IgPSBwcm94eUFwcGx5Rm4ocHJvcENoYWluLCBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICAgICAgY29uc3Qgb2JqQmVmb3JlID0gcmVmbGVjdG9yKC4uLmFyZ3MpOwogICAgICAgIGlmICggb2JqQmVmb3JlIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuIG9iakJlZm9yZTsgfQogICAgICAgIGNvbnN0IG9iakFmdGVyID0gb2JqZWN0UHJ1bmVGbigKICAgICAgICAgICAgb2JqQmVmb3JlLAogICAgICAgICAgICByYXdQcnVuZVBhdGhzLAogICAgICAgICAgICByYXdOZWVkbGVQYXRocywKICAgICAgICAgICAgeyBtYXRjaEFsbDogdHJ1ZSB9LAogICAgICAgICAgICBleHRyYUFyZ3MKICAgICAgICApOwogICAgICAgIHJldHVybiBvYmpBZnRlciB8fCBvYmpCZWZvcmU7CiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"trusted-replace-argument.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-outbound-text.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-suppress-native-method.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""}]